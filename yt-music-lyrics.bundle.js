(self.webpackChunkwebpack_babel_template=self.webpackChunkwebpack_babel_template||[]).push([[835],{702:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYnBhY2stYmFiZWwtdGVtcGxhdGUvLi9zcmMvcGFnZXMveXQtbXVzaWMtbHlyaWNzL3N0eWxlcy9pbmRleC5zY3NzPzFmYzYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///702\n")},92:(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.MusicPlayer = void 0;\nclass MusicPlayer {\n    constructor(file, lyricArr = null) {\n        this.file = file;\n        this.lyricArr = lyricArr;\n        this.lyricSpans = null;\n        // For efficient updates of classes\n        this.currentLyricIndex = 0;\n        this.handleSeekFn = this.handleSeek.bind(this);\n        this.updateProgressFn = this.updateProgress.bind(this);\n        this.updateLyricClassesFn = this.softUpdateLyricClasses.bind(this);\n        this.audioEl = document.getElementById("music-player-audio");\n        this.progressEl = document.querySelector(".music-player__progress");\n        this.audioEl.src = URL.createObjectURL(file);\n        this.pausePlayBtnEl = document.getElementById("play-pause-btn");\n        this.pausePlayBtnEl.addEventListener("click", () => {\n            if (this.audioEl.paused) {\n                this.pausePlayBtnEl.classList.add("playing");\n                this.pausePlayBtnEl.classList.remove("paused");\n                this.play();\n            }\n            else {\n                this.pausePlayBtnEl.classList.remove("playing");\n                this.pausePlayBtnEl.classList.add("paused");\n                this.pause();\n            }\n        });\n        this.audioEl.addEventListener("timeupdate", this.updateProgressFn);\n        this.audioEl.addEventListener("timeupdate", this.updateLyricClassesFn);\n        this.initProgressEvents();\n        this.initLyricEvents();\n    }\n    play() {\n        this.hardUpdateLyricClasses();\n        this.audioEl.play();\n    }\n    pause() {\n        this.audioEl.pause();\n    }\n    hardUpdateLyricClasses() {\n        var _a;\n        const time = this.audioEl.currentTime;\n        const lArr = this.lyricArr;\n        if (!lArr) {\n            return;\n        }\n        // Mark all the lyrics till the active one as played\n        (_a = this.lyricSpans) === null || _a === void 0 ? void 0 : _a.forEach((span, i) => {\n            span.classList.remove("active");\n            span.classList.remove("unvisited");\n            span.classList.remove("visited");\n            if (lArr[i][0] > time) {\n                span.classList.add("unvisited");\n            }\n            else if (lArr[i][0] <= time) {\n                span.classList.add("visited");\n            }\n            if (lArr[i][0] <= time && lArr[i + 1] && lArr[i + 1][0] >= time) {\n                this.currentLyricIndex = i;\n                span.scrollIntoView({ block: "center", behavior: "smooth" });\n                span.classList.add("active");\n            }\n        });\n    }\n    softUpdateLyricClasses() {\n        // Soft update - basically more efficient than hard update\n        if (!this.lyricArr) {\n            return;\n        }\n        if (this.lyricArr[this.currentLyricIndex + 1][0] <= this.audioEl.currentTime) {\n            this.moveToNextLyric();\n        }\n    }\n    moveToNextLyric() {\n        var _a, _b, _c;\n        // Change the old active lyric to visited\n        (_a = this.lyricSpans) === null || _a === void 0 ? void 0 : _a[this.currentLyricIndex].classList.remove("active");\n        (_b = this.lyricSpans) === null || _b === void 0 ? void 0 : _b[this.currentLyricIndex].classList.add("visited");\n        this.currentLyricIndex++;\n        const nextLyric = (_c = this.lyricSpans) === null || _c === void 0 ? void 0 : _c[this.currentLyricIndex];\n        if (nextLyric) {\n            nextLyric.scrollIntoView({ block: "center", behavior: "smooth" });\n            nextLyric.classList.remove("unvisited");\n            nextLyric.classList.add("active");\n        }\n    }\n    updateProgress() {\n        this.progressEl.style.setProperty("--progress", `${(this.audioEl.currentTime / this.audioEl.duration) * 100}%`);\n        if (this.audioEl.currentTime >= this.audioEl.duration) {\n            this.pausePlayBtnEl.classList.remove("playing");\n            this.pausePlayBtnEl.classList.add("paused");\n        }\n    }\n    initProgressEvents() {\n        // Add drag event listeners\n        this.progressEl.addEventListener("mousedown", (e) => {\n            this.handleSeek(e);\n            window.addEventListener("mousemove", this.handleSeekFn);\n        });\n        window.addEventListener("mouseup", () => {\n            window.removeEventListener("mousemove", this.handleSeekFn);\n        });\n        this.progressEl.addEventListener("click", this.handleSeekFn);\n    }\n    initLyricEvents() {\n        if (!this.lyricArr) {\n            return;\n        }\n        const lyricsContentEl = document.querySelector(".lyrics-card__content");\n        for (const [timeStamp, lyric] of this.lyricArr) {\n            const span = document.createElement("span");\n            span.classList.add("lyrics-card__content__lyric");\n            span.textContent = `${lyric}`;\n            span.addEventListener("click", () => {\n                this.audioEl.currentTime = timeStamp;\n                this.hardUpdateLyricClasses();\n            });\n            lyricsContentEl.appendChild(span);\n        }\n        this.lyricSpans = document.querySelectorAll(".lyrics-card__content__lyric");\n    }\n    handleSeek(e) {\n        const { clientX } = e;\n        const { left, width } = this.progressEl.getBoundingClientRect();\n        const percentage = (clientX - left) / width;\n        this.audioEl.currentTime = this.audioEl.duration * percentage;\n        this.hardUpdateLyricClasses();\n    }\n    destroy() {\n        this.audioEl.removeEventListener("timeupdate", this.updateProgressFn);\n        this.audioEl.removeEventListener("timeupdate", this.updateLyricClassesFn);\n        this.audioEl.src = "";\n    }\n}\nexports.MusicPlayer = MusicPlayer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///92\n')},819:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nvar _a;\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst base64_1 = __webpack_require__(741);\n__webpack_require__(702);\nconst jsmediatags_js_1 = __importDefault(__webpack_require__(907));\nconst MusicPlayer_1 = __webpack_require__(92);\nfunction jsMediaTags(file) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield new Promise((resolve, reject) => {\n            // @ts-ignore\n            jsmediatags_js_1.default.read(file, {\n                onSuccess: function (tag) {\n                    resolve(tag);\n                },\n                onError: function (error) {\n                    reject(error);\n                },\n            });\n        });\n    });\n}\nfunction showElement(el) {\n    el.classList.remove("hidden");\n}\nfunction hideElement(el) {\n    el.classList.add("hidden");\n}\nfunction compareLyrics(a, b) {\n    return a.replace(/\\[|\\]|\\./g, "").localeCompare(b.replace(/\\[|\\]|\\./g, ""));\n}\nfunction updateLyricClasses(timestamp) { }\nfunction processLyrics(lyrics) {\n    const lines = lyrics.split("\\n");\n    return lines.reduce((acc, line) => {\n        var _a;\n        const timeStamp = (_a = line.match(/\\[(\\d|\\.|:)+\\]/g)) === null || _a === void 0 ? void 0 : _a[0]; // Of the form [00:00.00]\n        // Convert the timestamp to seconds\n        if (!timeStamp) {\n            return acc;\n        }\n        const timeStampSeconds = timeStamp\n            .replace(/\\[|\\]/g, "")\n            .split(":")\n            .reduce((acc, time, i) => {\n            return acc + parseFloat(time) * Math.pow(60, 1 - i);\n        }, 0);\n        const lyric = line.replace(timeStamp, "").trim();\n        return Object.assign(Object.assign({}, acc), { [timeStampSeconds]: lyric });\n    }, { 0: "♪" });\n}\nconst inpCard = document.getElementById("inp-card");\n(_a = inpCard.querySelector("button")) === null || _a === void 0 ? void 0 : _a.addEventListener("click", handleMusicSubmit);\nconst lyricsCard = document.getElementById("lyrics-card");\nconst mainEl = document.querySelector("main");\nfunction mainLoop() {\n    // Show the input card first and then the lyrics card\n    showElement(inpCard);\n}\nfunction handleMusicSubmit() {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function* () {\n        const inpEl = mainEl.querySelector("input");\n        // Get the file from the input element\n        const file = (_a = inpEl.files) === null || _a === void 0 ? void 0 : _a[0];\n        if (!file) {\n            alert("Please select a file first!");\n            return;\n        }\n        // Read the file\n        const { tags } = (yield jsMediaTags(file));\n        const lyrics = (_b = tags.lyrics) === null || _b === void 0 ? void 0 : _b.lyrics;\n        const albumArt = (_c = tags.picture) === null || _c === void 0 ? void 0 : _c.data;\n        const bgEl = lyricsCard;\n        if (albumArt) {\n            const base64String = (0, base64_1.base64ArrayBuffer)(new Uint8Array(albumArt).buffer);\n            console.log({ base64String });\n            bgEl.style.backgroundImage = `url(\'data:image/png;base64,${base64String}\')`;\n        }\n        else {\n            bgEl.style.backgroundImage = "none";\n        }\n        const lyricsContentEl = lyricsCard.querySelector(".lyrics-card__content");\n        if (!lyricsContentEl) {\n            throw new Error("Lyrics content element not found!");\n        }\n        lyricsContentEl.innerHTML = "";\n        if (lyrics) {\n            const processedLyrics = processLyrics(lyrics);\n            const sortedLyrics = Object.entries(processedLyrics).map(([timeStamp, lyric]) => [parseInt(timeStamp), lyric]);\n            sortedLyrics.sort(([a], [b]) => {\n                return a - b;\n            });\n            const musicPlayer = new MusicPlayer_1.MusicPlayer(file, sortedLyrics);\n            musicPlayer.play();\n        }\n        else {\n            const musicPlayer = new MusicPlayer_1.MusicPlayer(file);\n            musicPlayer.play();\n            lyricsContentEl.innerHTML = "No lyrics found!";\n        }\n        hideElement(inpCard);\n        showElement(lyricsCard);\n    });\n}\nmainLoop();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///819\n')},741:(__unused_webpack_module,exports)=>{"use strict";eval('\n// Converts an ArrayBuffer directly to base64, without any intermediate \'convert to string then\n// use window.btoa\' step. According to my tests, this appears to be a faster approach:\n// http://jsperf.com/encoding-xhr-image-data/5\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.base64ArrayBuffer = void 0;\n/*\nMIT LICENSE\n\nCopyright 2011 Jon Leighton\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nfunction base64ArrayBuffer(arrayBuffer) {\n    var base64 = "";\n    var encodings = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";\n    var bytes = new Uint8Array(arrayBuffer);\n    var byteLength = bytes.byteLength;\n    var byteRemainder = byteLength % 3;\n    var mainLength = byteLength - byteRemainder;\n    var a, b, c, d;\n    var chunk;\n    // Main loop deals with bytes in chunks of 3\n    for (var i = 0; i < mainLength; i = i + 3) {\n        // Combine the three bytes into a single integer\n        chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        // Use bitmasks to extract 6-bit segments from the triplet\n        a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n        b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\n        c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\n        d = chunk & 63; // 63       = 2^6 - 1\n        // Convert the raw binary segments to the appropriate ASCII encoding\n        base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n    }\n    // Deal with the remaining bytes and padding\n    if (byteRemainder == 1) {\n        chunk = bytes[mainLength];\n        a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n        // Set the 4 least significant bits to zero\n        b = (chunk & 3) << 4; // 3   = 2^2 - 1\n        base64 += encodings[a] + encodings[b] + "==";\n    }\n    else if (byteRemainder == 2) {\n        chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\n        a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n        b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\n        // Set the 2 least significant bits to zero\n        c = (chunk & 15) << 2; // 15    = 2^4 - 1\n        base64 += encodings[a] + encodings[b] + encodings[c] + "=";\n    }\n    return base64;\n}\nexports.base64ArrayBuffer = base64ArrayBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQxLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QjtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLG9DQUFvQztBQUNwQyxpQ0FBaUM7QUFDakMsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxpQ0FBaUM7QUFDakM7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLWJhYmVsLXRlbXBsYXRlLy4vc3JjL3V0aWxzL2Jhc2U2NC50cz8xNzRmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29udmVydHMgYW4gQXJyYXlCdWZmZXIgZGlyZWN0bHkgdG8gYmFzZTY0LCB3aXRob3V0IGFueSBpbnRlcm1lZGlhdGUgJ2NvbnZlcnQgdG8gc3RyaW5nIHRoZW5cbi8vIHVzZSB3aW5kb3cuYnRvYScgc3RlcC4gQWNjb3JkaW5nIHRvIG15IHRlc3RzLCB0aGlzIGFwcGVhcnMgdG8gYmUgYSBmYXN0ZXIgYXBwcm9hY2g6XG4vLyBodHRwOi8vanNwZXJmLmNvbS9lbmNvZGluZy14aHItaW1hZ2UtZGF0YS81XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJhc2U2NEFycmF5QnVmZmVyID0gdm9pZCAwO1xuLypcbk1JVCBMSUNFTlNFXG5cbkNvcHlyaWdodCAyMDExIEpvbiBMZWlnaHRvblxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4qL1xuZnVuY3Rpb24gYmFzZTY0QXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgICB2YXIgYmFzZTY0ID0gXCJcIjtcbiAgICB2YXIgZW5jb2RpbmdzID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gYnl0ZXMuYnl0ZUxlbmd0aDtcbiAgICB2YXIgYnl0ZVJlbWFpbmRlciA9IGJ5dGVMZW5ndGggJSAzO1xuICAgIHZhciBtYWluTGVuZ3RoID0gYnl0ZUxlbmd0aCAtIGJ5dGVSZW1haW5kZXI7XG4gICAgdmFyIGEsIGIsIGMsIGQ7XG4gICAgdmFyIGNodW5rO1xuICAgIC8vIE1haW4gbG9vcCBkZWFscyB3aXRoIGJ5dGVzIGluIGNodW5rcyBvZiAzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYWluTGVuZ3RoOyBpID0gaSArIDMpIHtcbiAgICAgICAgLy8gQ29tYmluZSB0aGUgdGhyZWUgYnl0ZXMgaW50byBhIHNpbmdsZSBpbnRlZ2VyXG4gICAgICAgIGNodW5rID0gKGJ5dGVzW2ldIDw8IDE2KSB8IChieXRlc1tpICsgMV0gPDwgOCkgfCBieXRlc1tpICsgMl07XG4gICAgICAgIC8vIFVzZSBiaXRtYXNrcyB0byBleHRyYWN0IDYtYml0IHNlZ21lbnRzIGZyb20gdGhlIHRyaXBsZXRcbiAgICAgICAgYSA9IChjaHVuayAmIDE2NTE1MDcyKSA+PiAxODsgLy8gMTY1MTUwNzIgPSAoMl42IC0gMSkgPDwgMThcbiAgICAgICAgYiA9IChjaHVuayAmIDI1ODA0OCkgPj4gMTI7IC8vIDI1ODA0OCAgID0gKDJeNiAtIDEpIDw8IDEyXG4gICAgICAgIGMgPSAoY2h1bmsgJiA0MDMyKSA+PiA2OyAvLyA0MDMyICAgICA9ICgyXjYgLSAxKSA8PCA2XG4gICAgICAgIGQgPSBjaHVuayAmIDYzOyAvLyA2MyAgICAgICA9IDJeNiAtIDFcbiAgICAgICAgLy8gQ29udmVydCB0aGUgcmF3IGJpbmFyeSBzZWdtZW50cyB0byB0aGUgYXBwcm9wcmlhdGUgQVNDSUkgZW5jb2RpbmdcbiAgICAgICAgYmFzZTY0ICs9IGVuY29kaW5nc1thXSArIGVuY29kaW5nc1tiXSArIGVuY29kaW5nc1tjXSArIGVuY29kaW5nc1tkXTtcbiAgICB9XG4gICAgLy8gRGVhbCB3aXRoIHRoZSByZW1haW5pbmcgYnl0ZXMgYW5kIHBhZGRpbmdcbiAgICBpZiAoYnl0ZVJlbWFpbmRlciA9PSAxKSB7XG4gICAgICAgIGNodW5rID0gYnl0ZXNbbWFpbkxlbmd0aF07XG4gICAgICAgIGEgPSAoY2h1bmsgJiAyNTIpID4+IDI7IC8vIDI1MiA9ICgyXjYgLSAxKSA8PCAyXG4gICAgICAgIC8vIFNldCB0aGUgNCBsZWFzdCBzaWduaWZpY2FudCBiaXRzIHRvIHplcm9cbiAgICAgICAgYiA9IChjaHVuayAmIDMpIDw8IDQ7IC8vIDMgICA9IDJeMiAtIDFcbiAgICAgICAgYmFzZTY0ICs9IGVuY29kaW5nc1thXSArIGVuY29kaW5nc1tiXSArIFwiPT1cIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoYnl0ZVJlbWFpbmRlciA9PSAyKSB7XG4gICAgICAgIGNodW5rID0gKGJ5dGVzW21haW5MZW5ndGhdIDw8IDgpIHwgYnl0ZXNbbWFpbkxlbmd0aCArIDFdO1xuICAgICAgICBhID0gKGNodW5rICYgNjQ1MTIpID4+IDEwOyAvLyA2NDUxMiA9ICgyXjYgLSAxKSA8PCAxMFxuICAgICAgICBiID0gKGNodW5rICYgMTAwOCkgPj4gNDsgLy8gMTAwOCAgPSAoMl42IC0gMSkgPDwgNFxuICAgICAgICAvLyBTZXQgdGhlIDIgbGVhc3Qgc2lnbmlmaWNhbnQgYml0cyB0byB6ZXJvXG4gICAgICAgIGMgPSAoY2h1bmsgJiAxNSkgPDwgMjsgLy8gMTUgICAgPSAyXjQgLSAxXG4gICAgICAgIGJhc2U2NCArPSBlbmNvZGluZ3NbYV0gKyBlbmNvZGluZ3NbYl0gKyBlbmNvZGluZ3NbY10gKyBcIj1cIjtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2U2NDtcbn1cbmV4cG9ydHMuYmFzZTY0QXJyYXlCdWZmZXIgPSBiYXNlNjRBcnJheUJ1ZmZlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///741\n')},907:module=>{eval('// @ts-nocheck\r\n(function (f) {\r\n  if (true) {\r\n    module.exports = f();\r\n  } else { var g; }\r\n})(function () {\r\n  var define, module, exports;\r\n  return (function () {\r\n    function r(e, n, t) {\r\n      function o(i, f) {\r\n        if (!n[i]) {\r\n          if (!e[i]) {\r\n            var c = undefined;\r\n            if (!f && c) return require(i, !0);\r\n            if (u) return u(i, !0);\r\n            var a = new Error("Cannot find module \'" + i + "\'");\r\n            throw ((a.code = "MODULE_NOT_FOUND"), a);\r\n          }\r\n          var p = (n[i] = { exports: {} });\r\n          e[i][0].call(\r\n            p.exports,\r\n            function (r) {\r\n              var n = e[i][1][r];\r\n              return o(n || r);\r\n            },\r\n            p,\r\n            p.exports,\r\n            r,\r\n            e,\r\n            n,\r\n            t\r\n          );\r\n        }\r\n        return n[i].exports;\r\n      }\r\n      for (\r\n        var u = undefined, i = 0;\r\n        i < t.length;\r\n        i++\r\n      )\r\n        o(t[i]);\r\n      return o;\r\n    }\r\n    return r;\r\n  })()(\r\n    {\r\n      1: [function (require, module, exports) {}, {}],\r\n      2: [\r\n        function (require, module, exports) {\r\n          module.exports = XMLHttpRequest;\r\n        },\r\n        {},\r\n      ],\r\n      3: [\r\n        function (require, module, exports) {\r\n          "use strict";\r\n\r\n          function _typeof(obj) {\r\n            "@babel/helpers - typeof";\r\n            if (\r\n              typeof Symbol === "function" &&\r\n              typeof Symbol.iterator === "symbol"\r\n            ) {\r\n              _typeof = function _typeof(obj) {\r\n                return typeof obj;\r\n              };\r\n            } else {\r\n              _typeof = function _typeof(obj) {\r\n                return obj &&\r\n                  typeof Symbol === "function" &&\r\n                  obj.constructor === Symbol &&\r\n                  obj !== Symbol.prototype\r\n                  ? "symbol"\r\n                  : typeof obj;\r\n              };\r\n            }\r\n            return _typeof(obj);\r\n          }\r\n\r\n          function _classCallCheck(instance, Constructor) {\r\n            if (!(instance instanceof Constructor)) {\r\n              throw new TypeError("Cannot call a class as a function");\r\n            }\r\n          }\r\n\r\n          function _defineProperties(target, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n              var descriptor = props[i];\r\n              descriptor.enumerable = descriptor.enumerable || false;\r\n              descriptor.configurable = true;\r\n              if ("value" in descriptor) descriptor.writable = true;\r\n              Object.defineProperty(target, descriptor.key, descriptor);\r\n            }\r\n          }\r\n\r\n          function _createClass(Constructor, protoProps, staticProps) {\r\n            if (protoProps)\r\n              _defineProperties(Constructor.prototype, protoProps);\r\n            if (staticProps) _defineProperties(Constructor, staticProps);\r\n            return Constructor;\r\n          }\r\n\r\n          function _inherits(subClass, superClass) {\r\n            if (typeof superClass !== "function" && superClass !== null) {\r\n              throw new TypeError(\r\n                "Super expression must either be null or a function"\r\n              );\r\n            }\r\n            subClass.prototype = Object.create(\r\n              superClass && superClass.prototype,\r\n              {\r\n                constructor: {\r\n                  value: subClass,\r\n                  writable: true,\r\n                  configurable: true,\r\n                },\r\n              }\r\n            );\r\n            if (superClass) _setPrototypeOf(subClass, superClass);\r\n          }\r\n\r\n          function _setPrototypeOf(o, p) {\r\n            _setPrototypeOf =\r\n              Object.setPrototypeOf ||\r\n              function _setPrototypeOf(o, p) {\r\n                o.__proto__ = p;\r\n                return o;\r\n              };\r\n            return _setPrototypeOf(o, p);\r\n          }\r\n\r\n          function _createSuper(Derived) {\r\n            var hasNativeReflectConstruct = _isNativeReflectConstruct();\r\n            return function _createSuperInternal() {\r\n              var Super = _getPrototypeOf(Derived),\r\n                result;\r\n              if (hasNativeReflectConstruct) {\r\n                var NewTarget = _getPrototypeOf(this).constructor;\r\n                result = Reflect.construct(Super, arguments, NewTarget);\r\n              } else {\r\n                result = Super.apply(this, arguments);\r\n              }\r\n              return _possibleConstructorReturn(this, result);\r\n            };\r\n          }\r\n\r\n          function _possibleConstructorReturn(self, call) {\r\n            if (\r\n              call &&\r\n              (_typeof(call) === "object" || typeof call === "function")\r\n            ) {\r\n              return call;\r\n            }\r\n            return _assertThisInitialized(self);\r\n          }\r\n\r\n          function _assertThisInitialized(self) {\r\n            if (self === void 0) {\r\n              throw new ReferenceError(\r\n                "this hasn\'t been initialised - super() hasn\'t been called"\r\n              );\r\n            }\r\n            return self;\r\n          }\r\n\r\n          function _isNativeReflectConstruct() {\r\n            if (typeof Reflect === "undefined" || !Reflect.construct)\r\n              return false;\r\n            if (Reflect.construct.sham) return false;\r\n            if (typeof Proxy === "function") return true;\r\n            try {\r\n              Boolean.prototype.valueOf.call(\r\n                Reflect.construct(Boolean, [], function () {})\r\n              );\r\n              return true;\r\n            } catch (e) {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          function _getPrototypeOf(o) {\r\n            _getPrototypeOf = Object.setPrototypeOf\r\n              ? Object.getPrototypeOf\r\n              : function _getPrototypeOf(o) {\r\n                  return o.__proto__ || Object.getPrototypeOf(o);\r\n                };\r\n            return _getPrototypeOf(o);\r\n          }\r\n\r\n          function _defineProperty(obj, key, value) {\r\n            if (key in obj) {\r\n              Object.defineProperty(obj, key, {\r\n                value: value,\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n              });\r\n            } else {\r\n              obj[key] = value;\r\n            }\r\n            return obj;\r\n          }\r\n\r\n          var MediaFileReader = require("./MediaFileReader");\r\n\r\n          var ArrayFileReader = /*#__PURE__*/ (function (_MediaFileReader) {\r\n            _inherits(ArrayFileReader, _MediaFileReader);\r\n\r\n            var _super = _createSuper(ArrayFileReader);\r\n\r\n            function ArrayFileReader(array) {\r\n              var _this;\r\n\r\n              _classCallCheck(this, ArrayFileReader);\r\n\r\n              _this = _super.call(this);\r\n\r\n              _defineProperty(_assertThisInitialized(_this), "_array", void 0);\r\n\r\n              _defineProperty(_assertThisInitialized(_this), "_size", void 0);\r\n\r\n              _this._array = array;\r\n              _this._size = array.length;\r\n              _this._isInitialized = true;\r\n              return _this;\r\n            }\r\n\r\n            _createClass(\r\n              ArrayFileReader,\r\n              [\r\n                {\r\n                  key: "init",\r\n                  value: function init(callbacks) {\r\n                    setTimeout(callbacks.onSuccess, 0);\r\n                  },\r\n                },\r\n                {\r\n                  key: "loadRange",\r\n                  value: function loadRange(range, callbacks) {\r\n                    setTimeout(callbacks.onSuccess, 0);\r\n                  },\r\n                },\r\n                {\r\n                  key: "getByteAt",\r\n                  value: function getByteAt(offset) {\r\n                    if (offset >= this._array.length) {\r\n                      throw new Error(\r\n                        "Offset " + offset + " hasn\'t been loaded yet."\r\n                      );\r\n                    }\r\n\r\n                    return this._array[offset];\r\n                  },\r\n                },\r\n              ],\r\n              [\r\n                {\r\n                  key: "canReadFile",\r\n                  value: function canReadFile(file) {\r\n                    return (\r\n                      Array.isArray(file) ||\r\n                      (typeof Buffer === "function" && Buffer.isBuffer(file))\r\n                    );\r\n                  },\r\n                },\r\n              ]\r\n            );\r\n\r\n            return ArrayFileReader;\r\n          })(MediaFileReader);\r\n\r\n          module.exports = ArrayFileReader;\r\n        },\r\n        { "./MediaFileReader": 11 },\r\n      ],\r\n      4: [\r\n        function (require, module, exports) {\r\n          "use strict";\r\n\r\n          function _typeof(obj) {\r\n            "@babel/helpers - typeof";\r\n            if (\r\n              typeof Symbol === "function" &&\r\n              typeof Symbol.iterator === "symbol"\r\n            ) {\r\n              _typeof = function _typeof(obj) {\r\n                return typeof obj;\r\n              };\r\n            } else {\r\n              _typeof = function _typeof(obj) {\r\n                return obj &&\r\n                  typeof Symbol === "function" &&\r\n                  obj.constructor === Symbol &&\r\n                  obj !== Symbol.prototype\r\n                  ? "symbol"\r\n                  : typeof obj;\r\n              };\r\n            }\r\n            return _typeof(obj);\r\n          }\r\n\r\n          function _classCallCheck(instance, Constructor) {\r\n            if (!(instance instanceof Constructor)) {\r\n              throw new TypeError("Cannot call a class as a function");\r\n            }\r\n          }\r\n\r\n          function _defineProperties(target, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n              var descriptor = props[i];\r\n              descriptor.enumerable = descriptor.enumerable || false;\r\n              descriptor.configurable = true;\r\n              if ("value" in descriptor) descriptor.writable = true;\r\n              Object.defineProperty(target, descriptor.key, descriptor);\r\n            }\r\n          }\r\n\r\n          function _createClass(Constructor, protoProps, staticProps) {\r\n            if (protoProps)\r\n              _defineProperties(Constructor.prototype, protoProps);\r\n            if (staticProps) _defineProperties(Constructor, staticProps);\r\n            return Constructor;\r\n          }\r\n\r\n          function _inherits(subClass, superClass) {\r\n            if (typeof superClass !== "function" && superClass !== null) {\r\n              throw new TypeError(\r\n                "Super expression must either be null or a function"\r\n              );\r\n            }\r\n            subClass.prototype = Object.create(\r\n              superClass && superClass.prototype,\r\n              {\r\n                constructor: {\r\n                  value: subClass,\r\n                  writable: true,\r\n                  configurable: true,\r\n                },\r\n              }\r\n            );\r\n            if (superClass) _setPrototypeOf(subClass, superClass);\r\n          }\r\n\r\n          function _setPrototypeOf(o, p) {\r\n            _setPrototypeOf =\r\n              Object.setPrototypeOf ||\r\n              function _setPrototypeOf(o, p) {\r\n                o.__proto__ = p;\r\n                return o;\r\n              };\r\n            return _setPrototypeOf(o, p);\r\n          }\r\n\r\n          function _createSuper(Derived) {\r\n            var hasNativeReflectConstruct = _isNativeReflectConstruct();\r\n            return function _createSuperInternal() {\r\n              var Super = _getPrototypeOf(Derived),\r\n                result;\r\n              if (hasNativeReflectConstruct) {\r\n                var NewTarget = _getPrototypeOf(this).constructor;\r\n                result = Reflect.construct(Super, arguments, NewTarget);\r\n              } else {\r\n                result = Super.apply(this, arguments);\r\n              }\r\n              return _possibleConstructorReturn(this, result);\r\n            };\r\n          }\r\n\r\n          function _possibleConstructorReturn(self, call) {\r\n            if (\r\n              call &&\r\n              (_typeof(call) === "object" || typeof call === "function")\r\n            ) {\r\n              return call;\r\n            }\r\n            return _assertThisInitialized(self);\r\n          }\r\n\r\n          function _assertThisInitialized(self) {\r\n            if (self === void 0) {\r\n              throw new ReferenceError(\r\n                "this hasn\'t been initialised - super() hasn\'t been called"\r\n              );\r\n            }\r\n            return self;\r\n          }\r\n\r\n          function _isNativeReflectConstruct() {\r\n            if (typeof Reflect === "undefined" || !Reflect.construct)\r\n              return false;\r\n            if (Reflect.construct.sham) return false;\r\n            if (typeof Proxy === "function") return true;\r\n            try {\r\n              Boolean.prototype.valueOf.call(\r\n                Reflect.construct(Boolean, [], function () {})\r\n              );\r\n              return true;\r\n            } catch (e) {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          function _getPrototypeOf(o) {\r\n            _getPrototypeOf = Object.setPrototypeOf\r\n              ? Object.getPrototypeOf\r\n              : function _getPrototypeOf(o) {\r\n                  return o.__proto__ || Object.getPrototypeOf(o);\r\n                };\r\n            return _getPrototypeOf(o);\r\n          }\r\n\r\n          function _defineProperty(obj, key, value) {\r\n            if (key in obj) {\r\n              Object.defineProperty(obj, key, {\r\n                value: value,\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n              });\r\n            } else {\r\n              obj[key] = value;\r\n            }\r\n            return obj;\r\n          }\r\n\r\n          var ChunkedFileData = require("./ChunkedFileData");\r\n\r\n          var MediaFileReader = require("./MediaFileReader");\r\n\r\n          var BlobFileReader = /*#__PURE__*/ (function (_MediaFileReader) {\r\n            _inherits(BlobFileReader, _MediaFileReader);\r\n\r\n            var _super = _createSuper(BlobFileReader);\r\n\r\n            function BlobFileReader(blob) {\r\n              var _this;\r\n\r\n              _classCallCheck(this, BlobFileReader);\r\n\r\n              _this = _super.call(this);\r\n\r\n              _defineProperty(_assertThisInitialized(_this), "_blob", void 0);\r\n\r\n              _defineProperty(\r\n                _assertThisInitialized(_this),\r\n                "_fileData",\r\n                void 0\r\n              );\r\n\r\n              _this._blob = blob;\r\n              _this._fileData = new ChunkedFileData();\r\n              return _this;\r\n            }\r\n\r\n            _createClass(\r\n              BlobFileReader,\r\n              [\r\n                {\r\n                  key: "_init",\r\n                  value: function _init(callbacks) {\r\n                    this._size = this._blob.size;\r\n                    setTimeout(callbacks.onSuccess, 1);\r\n                  },\r\n                },\r\n                {\r\n                  key: "loadRange",\r\n                  value: function loadRange(range, callbacks) {\r\n                    var self = this; // $FlowIssue - flow isn\'t aware of mozSlice or webkitSlice\r\n\r\n                    var blobSlice =\r\n                      this._blob.slice ||\r\n                      this._blob.mozSlice ||\r\n                      this._blob.webkitSlice;\r\n                    var blob = blobSlice.call(\r\n                      this._blob,\r\n                      range[0],\r\n                      range[1] + 1\r\n                    );\r\n                    var browserFileReader = new FileReader();\r\n\r\n                    browserFileReader.onloadend = function (event) {\r\n                      var intArray = new Uint8Array(browserFileReader.result);\r\n\r\n                      self._fileData.addData(range[0], intArray);\r\n\r\n                      callbacks.onSuccess();\r\n                    };\r\n\r\n                    browserFileReader.onerror = browserFileReader.onabort =\r\n                      function (event) {\r\n                        if (callbacks.onError) {\r\n                          callbacks.onError({\r\n                            type: "blob",\r\n                            info: browserFileReader.error,\r\n                          });\r\n                        }\r\n                      };\r\n\r\n                    browserFileReader.readAsArrayBuffer(blob);\r\n                  },\r\n                },\r\n                {\r\n                  key: "getByteAt",\r\n                  value: function getByteAt(offset) {\r\n                    return this._fileData.getByteAt(offset);\r\n                  },\r\n                },\r\n              ],\r\n              [\r\n                {\r\n                  key: "canReadFile",\r\n                  value: function canReadFile(file) {\r\n                    return (\r\n                      (typeof Blob !== "undefined" && file instanceof Blob) || // File extends Blob but it seems that File instanceof Blob doesn\'t\r\n                      // quite work as expected in Cordova/PhoneGap.\r\n                      (typeof File !== "undefined" && file instanceof File)\r\n                    );\r\n                  },\r\n                },\r\n              ]\r\n            );\r\n\r\n            return BlobFileReader;\r\n          })(MediaFileReader);\r\n\r\n          module.exports = BlobFileReader;\r\n        },\r\n        { "./ChunkedFileData": 5, "./MediaFileReader": 11 },\r\n      ],\r\n      5: [\r\n        function (require, module, exports) {\r\n          /**\r\n           * This class represents a file that might not have all its data loaded yet.\r\n           * It is used when loading the entire file is not an option because it\'s too\r\n           * expensive. Instead, parts of the file are loaded and added only when needed.\r\n           * From a reading point of view is as if the entire file is loaded. The\r\n           * exception is when the data is not available yet, an error will be thrown.\r\n           * This class does not load the data, it just manages it. It provides operations\r\n           * to add and read data from the file.\r\n           *\r\n           *\r\n           */\r\n          "use strict";\r\n\r\n          function _classCallCheck(instance, Constructor) {\r\n            if (!(instance instanceof Constructor)) {\r\n              throw new TypeError("Cannot call a class as a function");\r\n            }\r\n          }\r\n\r\n          function _defineProperties(target, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n              var descriptor = props[i];\r\n              descriptor.enumerable = descriptor.enumerable || false;\r\n              descriptor.configurable = true;\r\n              if ("value" in descriptor) descriptor.writable = true;\r\n              Object.defineProperty(target, descriptor.key, descriptor);\r\n            }\r\n          }\r\n\r\n          function _createClass(Constructor, protoProps, staticProps) {\r\n            if (protoProps)\r\n              _defineProperties(Constructor.prototype, protoProps);\r\n            if (staticProps) _defineProperties(Constructor, staticProps);\r\n            return Constructor;\r\n          }\r\n\r\n          function _defineProperty(obj, key, value) {\r\n            if (key in obj) {\r\n              Object.defineProperty(obj, key, {\r\n                value: value,\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n              });\r\n            } else {\r\n              obj[key] = value;\r\n            }\r\n            return obj;\r\n          }\r\n\r\n          var NOT_FOUND = -1;\r\n\r\n          var ChunkedFileData = /*#__PURE__*/ (function () {\r\n            function ChunkedFileData() {\r\n              _classCallCheck(this, ChunkedFileData);\r\n\r\n              _defineProperty(this, "_fileData", void 0);\r\n\r\n              this._fileData = [];\r\n            }\r\n            /**\r\n             * Adds data to the file storage at a specific offset.\r\n             */\r\n\r\n            _createClass(\r\n              ChunkedFileData,\r\n              [\r\n                {\r\n                  key: "addData",\r\n                  value: function addData(offset, data) {\r\n                    var offsetEnd = offset + data.length - 1;\r\n\r\n                    var chunkRange = this._getChunkRange(offset, offsetEnd);\r\n\r\n                    if (chunkRange.startIx === NOT_FOUND) {\r\n                      this._fileData.splice(chunkRange.insertIx || 0, 0, {\r\n                        offset: offset,\r\n                        data: data,\r\n                      });\r\n                    } else {\r\n                      // If the data to add collides with existing chunks we prepend and\r\n                      // append data from the half colliding chunks to make the collision at\r\n                      // 100%. The new data can then replace all the colliding chunkes.\r\n                      var firstChunk = this._fileData[chunkRange.startIx];\r\n                      var lastChunk = this._fileData[chunkRange.endIx];\r\n                      var needsPrepend = offset > firstChunk.offset;\r\n                      var needsAppend =\r\n                        offsetEnd <\r\n                        lastChunk.offset + lastChunk.data.length - 1;\r\n                      var chunk = {\r\n                        offset: Math.min(offset, firstChunk.offset),\r\n                        data: data,\r\n                      };\r\n\r\n                      if (needsPrepend) {\r\n                        var slicedData = this._sliceData(\r\n                          firstChunk.data,\r\n                          0,\r\n                          offset - firstChunk.offset\r\n                        );\r\n\r\n                        chunk.data = this._concatData(slicedData, data);\r\n                      }\r\n\r\n                      if (needsAppend) {\r\n                        // Use the lastChunk because the slice logic is easier to handle.\r\n                        var slicedData = this._sliceData(\r\n                          chunk.data,\r\n                          0,\r\n                          lastChunk.offset - chunk.offset\r\n                        );\r\n\r\n                        chunk.data = this._concatData(\r\n                          slicedData,\r\n                          lastChunk.data\r\n                        );\r\n                      }\r\n\r\n                      this._fileData.splice(\r\n                        chunkRange.startIx,\r\n                        chunkRange.endIx - chunkRange.startIx + 1,\r\n                        chunk\r\n                      );\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  key: "_concatData",\r\n                  value: function _concatData(dataA, dataB) {\r\n                    // TypedArrays don\'t support concat.\r\n                    if (\r\n                      typeof ArrayBuffer !== "undefined" &&\r\n                      ArrayBuffer.isView &&\r\n                      ArrayBuffer.isView(dataA)\r\n                    ) {\r\n                      // $FlowIssue - flow thinks dataAandB is a string but it\'s not\r\n                      var dataAandB = new dataA.constructor(\r\n                        dataA.length + dataB.length\r\n                      ); // $FlowIssue - flow thinks dataAandB is a string but it\'s not\r\n\r\n                      dataAandB.set(dataA, 0); // $FlowIssue - flow thinks dataAandB is a string but it\'s not\r\n\r\n                      dataAandB.set(dataB, dataA.length);\r\n                      return dataAandB;\r\n                    } else {\r\n                      // $FlowIssue - flow thinks dataAandB is a TypedArray but it\'s not\r\n                      return dataA.concat(dataB);\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  key: "_sliceData",\r\n                  value: function _sliceData(data, begin, end) {\r\n                    // Some TypeArray implementations do not support slice yet.\r\n                    if (data.slice) {\r\n                      return data.slice(begin, end);\r\n                    } else {\r\n                      // $FlowIssue - flow thinks data is a string but it\'s not\r\n                      return data.subarray(begin, end);\r\n                    }\r\n                  },\r\n                  /**\r\n                   * Finds the chunk range that overlaps the [offsetStart-1,offsetEnd+1] range.\r\n                   * When a chunk is adjacent to the offset we still consider it part of the\r\n                   * range (this is the situation of offsetStart-1 or offsetEnd+1).\r\n                   * When no chunks are found `insertIx` denotes the index where the data\r\n                   * should be inserted in the data list (startIx == NOT_FOUND and endIX ==\r\n                   * NOT_FOUND).\r\n                   */\r\n                },\r\n                {\r\n                  key: "_getChunkRange",\r\n                  value: function _getChunkRange(offsetStart, offsetEnd) {\r\n                    var startChunkIx = NOT_FOUND;\r\n                    var endChunkIx = NOT_FOUND;\r\n                    var insertIx = 0; // Could use binary search but not expecting that many blocks to exist.\r\n\r\n                    for (\r\n                      var i = 0;\r\n                      i < this._fileData.length;\r\n                      i++, insertIx = i\r\n                    ) {\r\n                      var chunkOffsetStart = this._fileData[i].offset;\r\n                      var chunkOffsetEnd =\r\n                        chunkOffsetStart + this._fileData[i].data.length;\r\n\r\n                      if (offsetEnd < chunkOffsetStart - 1) {\r\n                        // This offset range doesn\'t overlap with any chunks.\r\n                        break;\r\n                      } // If it is adjacent we still consider it part of the range because\r\n                      // we\'re going end up with a single block with all contiguous data.\r\n\r\n                      if (\r\n                        offsetStart <= chunkOffsetEnd + 1 &&\r\n                        offsetEnd >= chunkOffsetStart - 1\r\n                      ) {\r\n                        startChunkIx = i;\r\n                        break;\r\n                      }\r\n                    } // No starting chunk was found, meaning that the offset is either before\r\n                    // or after the current stored chunks.\r\n\r\n                    if (startChunkIx === NOT_FOUND) {\r\n                      return {\r\n                        startIx: NOT_FOUND,\r\n                        endIx: NOT_FOUND,\r\n                        insertIx: insertIx,\r\n                      };\r\n                    } // Find the ending chunk.\r\n\r\n                    for (var i = startChunkIx; i < this._fileData.length; i++) {\r\n                      var chunkOffsetStart = this._fileData[i].offset;\r\n                      var chunkOffsetEnd =\r\n                        chunkOffsetStart + this._fileData[i].data.length;\r\n\r\n                      if (offsetEnd >= chunkOffsetStart - 1) {\r\n                        // Candidate for the end chunk, it doesn\'t mean it is yet.\r\n                        endChunkIx = i;\r\n                      }\r\n\r\n                      if (offsetEnd <= chunkOffsetEnd + 1) {\r\n                        break;\r\n                      }\r\n                    }\r\n\r\n                    if (endChunkIx === NOT_FOUND) {\r\n                      endChunkIx = startChunkIx;\r\n                    }\r\n\r\n                    return {\r\n                      startIx: startChunkIx,\r\n                      endIx: endChunkIx,\r\n                    };\r\n                  },\r\n                },\r\n                {\r\n                  key: "hasDataRange",\r\n                  value: function hasDataRange(offsetStart, offsetEnd) {\r\n                    for (var i = 0; i < this._fileData.length; i++) {\r\n                      var chunk = this._fileData[i];\r\n\r\n                      if (offsetEnd < chunk.offset) {\r\n                        return false;\r\n                      }\r\n\r\n                      if (\r\n                        offsetStart >= chunk.offset &&\r\n                        offsetEnd < chunk.offset + chunk.data.length\r\n                      ) {\r\n                        return true;\r\n                      }\r\n                    }\r\n\r\n                    return false;\r\n                  },\r\n                },\r\n                {\r\n                  key: "getByteAt",\r\n                  value: function getByteAt(offset) {\r\n                    var dataChunk;\r\n\r\n                    for (var i = 0; i < this._fileData.length; i++) {\r\n                      var dataChunkStart = this._fileData[i].offset;\r\n                      var dataChunkEnd =\r\n                        dataChunkStart + this._fileData[i].data.length - 1;\r\n\r\n                      if (offset >= dataChunkStart && offset <= dataChunkEnd) {\r\n                        dataChunk = this._fileData[i];\r\n                        break;\r\n                      }\r\n                    }\r\n\r\n                    if (dataChunk) {\r\n                      return dataChunk.data[offset - dataChunk.offset];\r\n                    }\r\n\r\n                    throw new Error(\r\n                      "Offset " + offset + " hasn\'t been loaded yet."\r\n                    );\r\n                  },\r\n                },\r\n              ],\r\n              [\r\n                {\r\n                  key: "NOT_FOUND",\r\n                  // $FlowIssue - get/set properties not yet supported\r\n                  get: function get() {\r\n                    return NOT_FOUND;\r\n                  },\r\n                },\r\n              ]\r\n            );\r\n\r\n            return ChunkedFileData;\r\n          })();\r\n\r\n          module.exports = ChunkedFileData;\r\n        },\r\n        {},\r\n      ],\r\n      6: [\r\n        function (require, module, exports) {\r\n          "use strict";\r\n\r\n          function _typeof(obj) {\r\n            "@babel/helpers - typeof";\r\n            if (\r\n              typeof Symbol === "function" &&\r\n              typeof Symbol.iterator === "symbol"\r\n            ) {\r\n              _typeof = function _typeof(obj) {\r\n                return typeof obj;\r\n              };\r\n            } else {\r\n              _typeof = function _typeof(obj) {\r\n                return obj &&\r\n                  typeof Symbol === "function" &&\r\n                  obj.constructor === Symbol &&\r\n                  obj !== Symbol.prototype\r\n                  ? "symbol"\r\n                  : typeof obj;\r\n              };\r\n            }\r\n            return _typeof(obj);\r\n          }\r\n\r\n          function _classCallCheck(instance, Constructor) {\r\n            if (!(instance instanceof Constructor)) {\r\n              throw new TypeError("Cannot call a class as a function");\r\n            }\r\n          }\r\n\r\n          function _defineProperties(target, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n              var descriptor = props[i];\r\n              descriptor.enumerable = descriptor.enumerable || false;\r\n              descriptor.configurable = true;\r\n              if ("value" in descriptor) descriptor.writable = true;\r\n              Object.defineProperty(target, descriptor.key, descriptor);\r\n            }\r\n          }\r\n\r\n          function _createClass(Constructor, protoProps, staticProps) {\r\n            if (protoProps)\r\n              _defineProperties(Constructor.prototype, protoProps);\r\n            if (staticProps) _defineProperties(Constructor, staticProps);\r\n            return Constructor;\r\n          }\r\n\r\n          function _inherits(subClass, superClass) {\r\n            if (typeof superClass !== "function" && superClass !== null) {\r\n              throw new TypeError(\r\n                "Super expression must either be null or a function"\r\n              );\r\n            }\r\n            subClass.prototype = Object.create(\r\n              superClass && superClass.prototype,\r\n              {\r\n                constructor: {\r\n                  value: subClass,\r\n                  writable: true,\r\n                  configurable: true,\r\n                },\r\n              }\r\n            );\r\n            if (superClass) _setPrototypeOf(subClass, superClass);\r\n          }\r\n\r\n          function _setPrototypeOf(o, p) {\r\n            _setPrototypeOf =\r\n              Object.setPrototypeOf ||\r\n              function _setPrototypeOf(o, p) {\r\n                o.__proto__ = p;\r\n                return o;\r\n              };\r\n            return _setPrototypeOf(o, p);\r\n          }\r\n\r\n          function _createSuper(Derived) {\r\n            var hasNativeReflectConstruct = _isNativeReflectConstruct();\r\n            return function _createSuperInternal() {\r\n              var Super = _getPrototypeOf(Derived),\r\n                result;\r\n              if (hasNativeReflectConstruct) {\r\n                var NewTarget = _getPrototypeOf(this).constructor;\r\n                result = Reflect.construct(Super, arguments, NewTarget);\r\n              } else {\r\n                result = Super.apply(this, arguments);\r\n              }\r\n              return _possibleConstructorReturn(this, result);\r\n            };\r\n          }\r\n\r\n          function _possibleConstructorReturn(self, call) {\r\n            if (\r\n              call &&\r\n              (_typeof(call) === "object" || typeof call === "function")\r\n            ) {\r\n              return call;\r\n            }\r\n            return _assertThisInitialized(self);\r\n          }\r\n\r\n          function _assertThisInitialized(self) {\r\n            if (self === void 0) {\r\n              throw new ReferenceError(\r\n                "this hasn\'t been initialised - super() hasn\'t been called"\r\n              );\r\n            }\r\n            return self;\r\n          }\r\n\r\n          function _isNativeReflectConstruct() {\r\n            if (typeof Reflect === "undefined" || !Reflect.construct)\r\n              return false;\r\n            if (Reflect.construct.sham) return false;\r\n            if (typeof Proxy === "function") return true;\r\n            try {\r\n              Boolean.prototype.valueOf.call(\r\n                Reflect.construct(Boolean, [], function () {})\r\n              );\r\n              return true;\r\n            } catch (e) {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          function _getPrototypeOf(o) {\r\n            _getPrototypeOf = Object.setPrototypeOf\r\n              ? Object.getPrototypeOf\r\n              : function _getPrototypeOf(o) {\r\n                  return o.__proto__ || Object.getPrototypeOf(o);\r\n                };\r\n            return _getPrototypeOf(o);\r\n          }\r\n\r\n          function _defineProperty(obj, key, value) {\r\n            if (key in obj) {\r\n              Object.defineProperty(obj, key, {\r\n                value: value,\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n              });\r\n            } else {\r\n              obj[key] = value;\r\n            }\r\n            return obj;\r\n          }\r\n\r\n          var MediaTagReader = require("./MediaTagReader");\r\n          /* The first 4 bytes of a FLAC file describes the header for the file. If these\r\n           * bytes respectively read "fLaC", we can determine it is a FLAC file.\r\n           */\r\n\r\n          var FLAC_HEADER_SIZE = 4;\r\n          /* FLAC metadata is stored in blocks containing data ranging from STREAMINFO to\r\n           * VORBIS_COMMENT, which is what we want to work with.\r\n           *\r\n           * Each metadata header is 4 bytes long, with the first byte determining whether\r\n           * it is the last metadata block before the audio data and what the block type is.\r\n           * This first byte can further be split into 8 bits, with the first bit being the\r\n           * last-metadata-block flag, and the last three bits being the block type.\r\n           *\r\n           * Since the specification states that the decimal value for a VORBIS_COMMENT block\r\n           * type is 4, the two possibilities for the comment block header values are:\r\n           * - 00000100 (Not a last metadata comment block, value of 4)\r\n           * - 10000100 (A last metadata comment block, value of 132)\r\n           *\r\n           * Similarly, the picture block header values are 6 and 128.\r\n           *\r\n           * All values for METADATA_BLOCK_HEADER can be found here.\r\n           * https://xiph.org/flac/format.html#metadata_block_header\r\n           */\r\n\r\n          var COMMENT_HEADERS = [4, 132];\r\n          var PICTURE_HEADERS = [6, 134]; // These are the possible image types as defined by the FLAC specification.\r\n\r\n          var IMAGE_TYPES = [\r\n            "Other",\r\n            "32x32 pixels \'file icon\' (PNG only)",\r\n            "Other file icon",\r\n            "Cover (front)",\r\n            "Cover (back)",\r\n            "Leaflet page",\r\n            "Media (e.g. label side of CD)",\r\n            "Lead artist/lead performer/soloist",\r\n            "Artist/performer",\r\n            "Conductor",\r\n            "Band/Orchestra",\r\n            "Composer",\r\n            "Lyricist/text writer",\r\n            "Recording Location",\r\n            "During recording",\r\n            "During performance",\r\n            "Movie/video screen capture",\r\n            "A bright coloured fish",\r\n            "Illustration",\r\n            "Band/artist logotype",\r\n            "Publisher/Studio logotype",\r\n          ];\r\n\r\n          /**\r\n           * Class representing a MediaTagReader that parses FLAC tags.\r\n           */\r\n          var FLACTagReader = /*#__PURE__*/ (function (_MediaTagReader) {\r\n            _inherits(FLACTagReader, _MediaTagReader);\r\n\r\n            var _super = _createSuper(FLACTagReader);\r\n\r\n            function FLACTagReader() {\r\n              var _this;\r\n\r\n              _classCallCheck(this, FLACTagReader);\r\n\r\n              for (\r\n                var _len = arguments.length, args = new Array(_len), _key = 0;\r\n                _key < _len;\r\n                _key++\r\n              ) {\r\n                args[_key] = arguments[_key];\r\n              }\r\n\r\n              _this = _super.call.apply(_super, [this].concat(args));\r\n\r\n              _defineProperty(\r\n                _assertThisInitialized(_this),\r\n                "_commentOffset",\r\n                void 0\r\n              );\r\n\r\n              _defineProperty(\r\n                _assertThisInitialized(_this),\r\n                "_pictureOffset",\r\n                void 0\r\n              );\r\n\r\n              return _this;\r\n            }\r\n\r\n            _createClass(\r\n              FLACTagReader,\r\n              [\r\n                {\r\n                  key: "_loadData",\r\n                  value:\r\n                    /**\r\n                     * Function called to load the data from the file.\r\n                     *\r\n                     * To begin processing the blocks, the next 4 bytes after the initial 4 bytes\r\n                     * (bytes 4 through 7) are loaded. From there, the rest of the loading process\r\n                     * is passed on to the _loadBlock function, which will handle the rest of the\r\n                     * parsing for the metadata blocks.\r\n                     *\r\n                     * @param {MediaFileReader} mediaFileReader - The MediaFileReader used to parse the file.\r\n                     * @param {LoadCallbackType} callbacks - The callback to call once _loadData is completed.\r\n                     */\r\n                    function _loadData(mediaFileReader, callbacks) {\r\n                      var self = this;\r\n                      mediaFileReader.loadRange([4, 7], {\r\n                        onSuccess: function onSuccess() {\r\n                          self._loadBlock(mediaFileReader, 4, callbacks);\r\n                        },\r\n                      });\r\n                    },\r\n                  /**\r\n                   * Special internal function used to parse the different FLAC blocks.\r\n                   *\r\n                   * The FLAC specification doesn\'t specify a specific location for metadata to resign, but\r\n                   * dictates that it may be in one of various blocks located throughout the file. To load the\r\n                   * metadata, we must locate the header first. This can be done by reading the first byte of\r\n                   * each block to determine the block type. After the block type comes a 24 bit integer that stores\r\n                   * the length of the block as big endian. Using this, we locate the block and store the offset for\r\n                   * parsing later.\r\n                   *\r\n                   * After each block has been parsed, the _nextBlock function is called in order\r\n                   * to parse the information of the next block. All blocks need to be parsed in order to find\r\n                   * all of the picture and comment blocks.\r\n                   *\r\n                   * More info on the FLAC specification may be found here:\r\n                   * https://xiph.org/flac/format.html\r\n                   * @param {MediaFileReader} mediaFileReader - The MediaFileReader used to parse the file.\r\n                   * @param {number} offset - The offset to start checking the header from.\r\n                   * @param {LoadCallbackType} callbacks - The callback to call once the header has been found.\r\n                   */\r\n                },\r\n                {\r\n                  key: "_loadBlock",\r\n                  value: function _loadBlock(\r\n                    mediaFileReader,\r\n                    offset,\r\n                    callbacks\r\n                  ) {\r\n                    var self = this;\r\n                    /* As mentioned above, this first byte is loaded to see what metadata type\r\n                     * this block represents.\r\n                     */\r\n\r\n                    var blockHeader = mediaFileReader.getByteAt(offset);\r\n                    /* The last three bytes (integer 24) contain a value representing the length\r\n                     * of the following metadata block. The 1 is added in order to shift the offset\r\n                     * by one to get the last three bytes in the block header.\r\n                     */\r\n\r\n                    var blockSize = mediaFileReader.getInteger24At(\r\n                      offset + 1,\r\n                      true\r\n                    );\r\n                    /* This conditional checks if blockHeader (the byte retrieved representing the\r\n                     * type of the header) is one the headers we are looking for.\r\n                     *\r\n                     * If that is not true, the block is skipped over and the next range is loaded:\r\n                     * - offset + 4 + blockSize adds 4 to skip over the initial metadata header and\r\n                     * blockSize to skip over the block overall, placing it at the head of the next\r\n                     * metadata header.\r\n                     * - offset + 4 + 4 + blockSize does the same thing as the previous block with\r\n                     * the exception of adding another 4 bytes to move it to the end of the new metadata\r\n                     * header.\r\n                     */\r\n\r\n                    if (COMMENT_HEADERS.indexOf(blockHeader) !== -1) {\r\n                      /* 4 is added to offset to move it to the head of the actual metadata.\r\n                       * The range starting from offsetMatadata (the beginning of the block)\r\n                       * and offsetMetadata + blockSize (the end of the block) is loaded.\r\n                       */\r\n                      var offsetMetadata = offset + 4;\r\n                      mediaFileReader.loadRange(\r\n                        [offsetMetadata, offsetMetadata + blockSize],\r\n                        {\r\n                          onSuccess: function onSuccess() {\r\n                            self._commentOffset = offsetMetadata;\r\n\r\n                            self._nextBlock(\r\n                              mediaFileReader,\r\n                              offset,\r\n                              blockHeader,\r\n                              blockSize,\r\n                              callbacks\r\n                            );\r\n                          },\r\n                        }\r\n                      );\r\n                    } else if (PICTURE_HEADERS.indexOf(blockHeader) !== -1) {\r\n                      var offsetMetadata = offset + 4;\r\n                      mediaFileReader.loadRange(\r\n                        [offsetMetadata, offsetMetadata + blockSize],\r\n                        {\r\n                          onSuccess: function onSuccess() {\r\n                            self._pictureOffset = offsetMetadata;\r\n\r\n                            self._nextBlock(\r\n                              mediaFileReader,\r\n                              offset,\r\n                              blockHeader,\r\n                              blockSize,\r\n                              callbacks\r\n                            );\r\n                          },\r\n                        }\r\n                      );\r\n                    } else {\r\n                      self._nextBlock(\r\n                        mediaFileReader,\r\n                        offset,\r\n                        blockHeader,\r\n                        blockSize,\r\n                        callbacks\r\n                      );\r\n                    }\r\n                  },\r\n                  /**\r\n                   * Internal function used to load the next range and respective block.\r\n                   *\r\n                   * If the metadata block that was identified is not the last block before the\r\n                   * audio blocks, the function will continue loading the next blocks. If it is\r\n                   * the last block (identified by any values greater than 127, see FLAC spec.),\r\n                   * the function will determine whether a comment block had been identified.\r\n                   *\r\n                   * If the block does not exist, the error callback is called. Otherwise, the function\r\n                   * will call the success callback, allowing data parsing to begin.\r\n                   * @param {MediaFileReader} mediaFileReader - The MediaFileReader used to parse the file.\r\n                   * @param {number} offset - The offset that the existing header was located at.\r\n                   * @param {number} blockHeader - An integer reflecting the header type of the block.\r\n                   * @param {number} blockSize - The size of the previously processed header.\r\n                   * @param {LoadCallbackType} callbacks - The callback functions to be called.\r\n                   */\r\n                },\r\n                {\r\n                  key: "_nextBlock",\r\n                  value: function _nextBlock(\r\n                    mediaFileReader,\r\n                    offset,\r\n                    blockHeader,\r\n                    blockSize,\r\n                    callbacks\r\n                  ) {\r\n                    var self = this;\r\n\r\n                    if (blockHeader > 127) {\r\n                      if (!self._commentOffset) {\r\n                        callbacks.onError({\r\n                          type: "loadData",\r\n                          info: "Comment block could not be found.",\r\n                        });\r\n                      } else {\r\n                        callbacks.onSuccess();\r\n                      }\r\n                    } else {\r\n                      mediaFileReader.loadRange(\r\n                        [offset + 4 + blockSize, offset + 4 + 4 + blockSize],\r\n                        {\r\n                          onSuccess: function onSuccess() {\r\n                            self._loadBlock(\r\n                              mediaFileReader,\r\n                              offset + 4 + blockSize,\r\n                              callbacks\r\n                            );\r\n                          },\r\n                        }\r\n                      );\r\n                    }\r\n                  },\r\n                  /**\r\n                   * Parses the data and returns the tags.\r\n                   *\r\n                   * This is an overview of the VorbisComment format and what this function attempts to\r\n                   * retrieve:\r\n                   * - First 4 bytes: a long that contains the length of the vendor string.\r\n                   * - Next n bytes: the vendor string encoded in UTF-8.\r\n                   * - Next 4 bytes: a long representing how many comments are in this block\r\n                   * For each comment that exists:\r\n                   * - First 4 bytes: a long representing the length of the comment\r\n                   * - Next n bytes: the comment encoded in UTF-8.\r\n                   * The comment string will usually appear in a format similar to:\r\n                   * ARTIST=me\r\n                   *\r\n                   * Note that the longs and integers in this block are encoded in little endian\r\n                   * as opposed to big endian for the rest of the FLAC spec.\r\n                   * @param {MediaFileReader} data - The MediaFileReader to parse the file with.\r\n                   * @param {Array<string>} [tags] - Optional tags to also be retrieved from the file.\r\n                   * @return {TagType} - An object containing the tag information for the file.\r\n                   */\r\n                },\r\n                {\r\n                  key: "_parseData",\r\n                  value: function _parseData(data, tags) {\r\n                    var vendorLength = data.getLongAt(\r\n                      this._commentOffset,\r\n                      false\r\n                    );\r\n                    var offsetVendor = this._commentOffset + 4;\r\n                    /* This line is able to retrieve the vendor string that the VorbisComment block\r\n                     * contains. However, it is not part of the tags that JSMediaTags normally retrieves,\r\n                     * and is therefore commented out.\r\n                     */\r\n                    // var vendor = data.getStringWithCharsetAt(offsetVendor, vendorLength, "utf-8").toString();\r\n\r\n                    var offsetList = vendorLength + offsetVendor;\r\n                    /* To get the metadata from the block, we first get the long that contains the\r\n                     * number of actual comment values that are existent within the block.\r\n                     *\r\n                     * As we loop through all of the comment blocks, we get the data length in order to\r\n                     * get the right size string, and then determine which category that string falls under.\r\n                     * The dataOffset variable is constantly updated so that it is at the beginning of the\r\n                     * comment that is currently being parsed.\r\n                     *\r\n                     * Additions of 4 here are used to move the offset past the first 4 bytes which only contain\r\n                     * the length of the comment.\r\n                     */\r\n\r\n                    var numComments = data.getLongAt(offsetList, false);\r\n                    var dataOffset = offsetList + 4;\r\n                    var title, artist, album, track, genre, picture;\r\n\r\n                    for (var i = 0; i < numComments; i++) {\r\n                      var _dataLength = data.getLongAt(dataOffset, false);\r\n\r\n                      var s = data\r\n                        .getStringWithCharsetAt(\r\n                          dataOffset + 4,\r\n                          _dataLength,\r\n                          "utf-8"\r\n                        )\r\n                        .toString();\r\n                      var d = s.indexOf("=");\r\n                      var split = [s.slice(0, d), s.slice(d + 1)];\r\n\r\n                      switch (split[0].toUpperCase()) {\r\n                        case "TITLE":\r\n                          title = split[1];\r\n                          break;\r\n\r\n                        case "ARTIST":\r\n                          artist = split[1];\r\n                          break;\r\n\r\n                        case "ALBUM":\r\n                          album = split[1];\r\n                          break;\r\n\r\n                        case "TRACKNUMBER":\r\n                          track = split[1];\r\n                          break;\r\n\r\n                        case "GENRE":\r\n                          genre = split[1];\r\n                          break;\r\n                      }\r\n\r\n                      dataOffset += 4 + _dataLength;\r\n                    }\r\n                    /* If a picture offset was found and assigned, then the reader will start processing\r\n                     * the picture block from that point.\r\n                     *\r\n                     * All the lengths for the picture data can be found online here:\r\n                     * https://xiph.org/flac/format.html#metadata_block_picture\r\n                     */\r\n\r\n                    if (this._pictureOffset) {\r\n                      var imageType = data.getLongAt(this._pictureOffset, true);\r\n                      var offsetMimeLength = this._pictureOffset + 4;\r\n                      var mimeLength = data.getLongAt(offsetMimeLength, true);\r\n                      var offsetMime = offsetMimeLength + 4;\r\n                      var mime = data.getStringAt(offsetMime, mimeLength);\r\n                      var offsetDescriptionLength = offsetMime + mimeLength;\r\n                      var descriptionLength = data.getLongAt(\r\n                        offsetDescriptionLength,\r\n                        true\r\n                      );\r\n                      var offsetDescription = offsetDescriptionLength + 4;\r\n                      var description = data\r\n                        .getStringWithCharsetAt(\r\n                          offsetDescription,\r\n                          descriptionLength,\r\n                          "utf-8"\r\n                        )\r\n                        .toString();\r\n                      var offsetDataLength =\r\n                        offsetDescription + descriptionLength + 16;\r\n                      var dataLength = data.getLongAt(offsetDataLength, true);\r\n                      var offsetData = offsetDataLength + 4;\r\n                      var imageData = data.getBytesAt(\r\n                        offsetData,\r\n                        dataLength,\r\n                        true\r\n                      );\r\n                      picture = {\r\n                        format: mime,\r\n                        type: IMAGE_TYPES[imageType],\r\n                        description: description,\r\n                        data: imageData,\r\n                      };\r\n                    }\r\n\r\n                    var tag = {\r\n                      type: "FLAC",\r\n                      version: "1",\r\n                      tags: {\r\n                        title: title,\r\n                        artist: artist,\r\n                        album: album,\r\n                        track: track,\r\n                        genre: genre,\r\n                        picture: picture,\r\n                      },\r\n                    };\r\n                    return tag;\r\n                  },\r\n                },\r\n              ],\r\n              [\r\n                {\r\n                  key: "getTagIdentifierByteRange",\r\n                  value:\r\n                    /**\r\n                     * Gets the byte range for the tag identifier.\r\n                     *\r\n                     * Because the Vorbis comment block is not guaranteed to be in a specified\r\n                     * location, we can only load the first 4 bytes of the file to confirm it\r\n                     * is a FLAC first.\r\n                     *\r\n                     * @return {ByteRange} The byte range that identifies the tag for a FLAC.\r\n                     */\r\n                    function getTagIdentifierByteRange() {\r\n                      return {\r\n                        offset: 0,\r\n                        length: FLAC_HEADER_SIZE,\r\n                      };\r\n                    },\r\n                  /**\r\n                   * Determines whether or not this reader can read a certain tag format.\r\n                   *\r\n                   * This checks that the first 4 characters in the file are fLaC, which\r\n                   * according to the FLAC file specification should be the characters that\r\n                   * indicate a FLAC file.\r\n                   *\r\n                   * @return {boolean} True if the header is fLaC, false otherwise.\r\n                   */\r\n                },\r\n                {\r\n                  key: "canReadTagFormat",\r\n                  value: function canReadTagFormat(tagIdentifier) {\r\n                    var id = String.fromCharCode.apply(\r\n                      String,\r\n                      tagIdentifier.slice(0, 4)\r\n                    );\r\n                    return id === "fLaC";\r\n                  },\r\n                },\r\n              ]\r\n            );\r\n\r\n            return FLACTagReader;\r\n          })(MediaTagReader);\r\n\r\n          module.exports = FLACTagReader;\r\n        },\r\n        { "./MediaTagReader": 12 },\r\n      ],\r\n      7: [\r\n        function (require, module, exports) {\r\n          "use strict";\r\n\r\n          function _typeof(obj) {\r\n            "@babel/helpers - typeof";\r\n            if (\r\n              typeof Symbol === "function" &&\r\n              typeof Symbol.iterator === "symbol"\r\n            ) {\r\n              _typeof = function _typeof(obj) {\r\n                return typeof obj;\r\n              };\r\n            } else {\r\n              _typeof = function _typeof(obj) {\r\n                return obj &&\r\n                  typeof Symbol === "function" &&\r\n                  obj.constructor === Symbol &&\r\n                  obj !== Symbol.prototype\r\n                  ? "symbol"\r\n                  : typeof obj;\r\n              };\r\n            }\r\n            return _typeof(obj);\r\n          }\r\n\r\n          function _classCallCheck(instance, Constructor) {\r\n            if (!(instance instanceof Constructor)) {\r\n              throw new TypeError("Cannot call a class as a function");\r\n            }\r\n          }\r\n\r\n          function _defineProperties(target, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n              var descriptor = props[i];\r\n              descriptor.enumerable = descriptor.enumerable || false;\r\n              descriptor.configurable = true;\r\n              if ("value" in descriptor) descriptor.writable = true;\r\n              Object.defineProperty(target, descriptor.key, descriptor);\r\n            }\r\n          }\r\n\r\n          function _createClass(Constructor, protoProps, staticProps) {\r\n            if (protoProps)\r\n              _defineProperties(Constructor.prototype, protoProps);\r\n            if (staticProps) _defineProperties(Constructor, staticProps);\r\n            return Constructor;\r\n          }\r\n\r\n          function _inherits(subClass, superClass) {\r\n            if (typeof superClass !== "function" && superClass !== null) {\r\n              throw new TypeError(\r\n                "Super expression must either be null or a function"\r\n              );\r\n            }\r\n            subClass.prototype = Object.create(\r\n              superClass && superClass.prototype,\r\n              {\r\n                constructor: {\r\n                  value: subClass,\r\n                  writable: true,\r\n                  configurable: true,\r\n                },\r\n              }\r\n            );\r\n            if (superClass) _setPrototypeOf(subClass, superClass);\r\n          }\r\n\r\n          function _setPrototypeOf(o, p) {\r\n            _setPrototypeOf =\r\n              Object.setPrototypeOf ||\r\n              function _setPrototypeOf(o, p) {\r\n                o.__proto__ = p;\r\n                return o;\r\n              };\r\n            return _setPrototypeOf(o, p);\r\n          }\r\n\r\n          function _createSuper(Derived) {\r\n            var hasNativeReflectConstruct = _isNativeReflectConstruct();\r\n            return function _createSuperInternal() {\r\n              var Super = _getPrototypeOf(Derived),\r\n                result;\r\n              if (hasNativeReflectConstruct) {\r\n                var NewTarget = _getPrototypeOf(this).constructor;\r\n                result = Reflect.construct(Super, arguments, NewTarget);\r\n              } else {\r\n                result = Super.apply(this, arguments);\r\n              }\r\n              return _possibleConstructorReturn(this, result);\r\n            };\r\n          }\r\n\r\n          function _possibleConstructorReturn(self, call) {\r\n            if (\r\n              call &&\r\n              (_typeof(call) === "object" || typeof call === "function")\r\n            ) {\r\n              return call;\r\n            }\r\n            return _assertThisInitialized(self);\r\n          }\r\n\r\n          function _assertThisInitialized(self) {\r\n            if (self === void 0) {\r\n              throw new ReferenceError(\r\n                "this hasn\'t been initialised - super() hasn\'t been called"\r\n              );\r\n            }\r\n            return self;\r\n          }\r\n\r\n          function _isNativeReflectConstruct() {\r\n            if (typeof Reflect === "undefined" || !Reflect.construct)\r\n              return false;\r\n            if (Reflect.construct.sham) return false;\r\n            if (typeof Proxy === "function") return true;\r\n            try {\r\n              Boolean.prototype.valueOf.call(\r\n                Reflect.construct(Boolean, [], function () {})\r\n              );\r\n              return true;\r\n            } catch (e) {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          function _getPrototypeOf(o) {\r\n            _getPrototypeOf = Object.setPrototypeOf\r\n              ? Object.getPrototypeOf\r\n              : function _getPrototypeOf(o) {\r\n                  return o.__proto__ || Object.getPrototypeOf(o);\r\n                };\r\n            return _getPrototypeOf(o);\r\n          }\r\n\r\n          var MediaTagReader = require("./MediaTagReader");\r\n\r\n          var MediaFileReader = require("./MediaFileReader");\r\n\r\n          var ID3v1TagReader = /*#__PURE__*/ (function (_MediaTagReader) {\r\n            _inherits(ID3v1TagReader, _MediaTagReader);\r\n\r\n            var _super = _createSuper(ID3v1TagReader);\r\n\r\n            function ID3v1TagReader() {\r\n              _classCallCheck(this, ID3v1TagReader);\r\n\r\n              return _super.apply(this, arguments);\r\n            }\r\n\r\n            _createClass(\r\n              ID3v1TagReader,\r\n              [\r\n                {\r\n                  key: "_loadData",\r\n                  value: function _loadData(mediaFileReader, callbacks) {\r\n                    var fileSize = mediaFileReader.getSize();\r\n                    mediaFileReader.loadRange(\r\n                      [fileSize - 128, fileSize - 1],\r\n                      callbacks\r\n                    );\r\n                  },\r\n                },\r\n                {\r\n                  key: "_parseData",\r\n                  value: function _parseData(data, tags) {\r\n                    var offset = data.getSize() - 128;\r\n                    var title = data\r\n                      .getStringWithCharsetAt(offset + 3, 30)\r\n                      .toString();\r\n                    var artist = data\r\n                      .getStringWithCharsetAt(offset + 33, 30)\r\n                      .toString();\r\n                    var album = data\r\n                      .getStringWithCharsetAt(offset + 63, 30)\r\n                      .toString();\r\n                    var year = data\r\n                      .getStringWithCharsetAt(offset + 93, 4)\r\n                      .toString();\r\n                    var trackFlag = data.getByteAt(offset + 97 + 28);\r\n                    var track = data.getByteAt(offset + 97 + 29);\r\n\r\n                    if (trackFlag == 0 && track != 0) {\r\n                      var version = "1.1";\r\n                      var comment = data\r\n                        .getStringWithCharsetAt(offset + 97, 28)\r\n                        .toString();\r\n                    } else {\r\n                      var version = "1.0";\r\n                      var comment = data\r\n                        .getStringWithCharsetAt(offset + 97, 30)\r\n                        .toString();\r\n                      track = 0;\r\n                    }\r\n\r\n                    var genreIdx = data.getByteAt(offset + 97 + 30);\r\n\r\n                    if (genreIdx < 255) {\r\n                      var genre = GENRES[genreIdx];\r\n                    } else {\r\n                      var genre = "";\r\n                    }\r\n\r\n                    var tag = {\r\n                      type: "ID3",\r\n                      version: version,\r\n                      tags: {\r\n                        title: title,\r\n                        artist: artist,\r\n                        album: album,\r\n                        year: year,\r\n                        comment: comment,\r\n                        genre: genre,\r\n                      },\r\n                    };\r\n\r\n                    if (track) {\r\n                      // $FlowIssue - flow is not happy with adding properties\r\n                      tag.tags.track = track;\r\n                    }\r\n\r\n                    return tag;\r\n                  },\r\n                },\r\n              ],\r\n              [\r\n                {\r\n                  key: "getTagIdentifierByteRange",\r\n                  value: function getTagIdentifierByteRange() {\r\n                    // The identifier is TAG and is at offset: -128. However, to avoid a\r\n                    // fetch for the tag identifier and another for the data, we load the\r\n                    // entire data since it\'s so small.\r\n                    return {\r\n                      offset: -128,\r\n                      length: 128,\r\n                    };\r\n                  },\r\n                },\r\n                {\r\n                  key: "canReadTagFormat",\r\n                  value: function canReadTagFormat(tagIdentifier) {\r\n                    var id = String.fromCharCode.apply(\r\n                      String,\r\n                      tagIdentifier.slice(0, 3)\r\n                    );\r\n                    return id === "TAG";\r\n                  },\r\n                },\r\n              ]\r\n            );\r\n\r\n            return ID3v1TagReader;\r\n          })(MediaTagReader);\r\n\r\n          var GENRES = [\r\n            "Blues",\r\n            "Classic Rock",\r\n            "Country",\r\n            "Dance",\r\n            "Disco",\r\n            "Funk",\r\n            "Grunge",\r\n            "Hip-Hop",\r\n            "Jazz",\r\n            "Metal",\r\n            "New Age",\r\n            "Oldies",\r\n            "Other",\r\n            "Pop",\r\n            "R&B",\r\n            "Rap",\r\n            "Reggae",\r\n            "Rock",\r\n            "Techno",\r\n            "Industrial",\r\n            "Alternative",\r\n            "Ska",\r\n            "Death Metal",\r\n            "Pranks",\r\n            "Soundtrack",\r\n            "Euro-Techno",\r\n            "Ambient",\r\n            "Trip-Hop",\r\n            "Vocal",\r\n            "Jazz+Funk",\r\n            "Fusion",\r\n            "Trance",\r\n            "Classical",\r\n            "Instrumental",\r\n            "Acid",\r\n            "House",\r\n            "Game",\r\n            "Sound Clip",\r\n            "Gospel",\r\n            "Noise",\r\n            "AlternRock",\r\n            "Bass",\r\n            "Soul",\r\n            "Punk",\r\n            "Space",\r\n            "Meditative",\r\n            "Instrumental Pop",\r\n            "Instrumental Rock",\r\n            "Ethnic",\r\n            "Gothic",\r\n            "Darkwave",\r\n            "Techno-Industrial",\r\n            "Electronic",\r\n            "Pop-Folk",\r\n            "Eurodance",\r\n            "Dream",\r\n            "Southern Rock",\r\n            "Comedy",\r\n            "Cult",\r\n            "Gangsta",\r\n            "Top 40",\r\n            "Christian Rap",\r\n            "Pop/Funk",\r\n            "Jungle",\r\n            "Native American",\r\n            "Cabaret",\r\n            "New Wave",\r\n            "Psychadelic",\r\n            "Rave",\r\n            "Showtunes",\r\n            "Trailer",\r\n            "Lo-Fi",\r\n            "Tribal",\r\n            "Acid Punk",\r\n            "Acid Jazz",\r\n            "Polka",\r\n            "Retro",\r\n            "Musical",\r\n            "Rock & Roll",\r\n            "Hard Rock",\r\n            "Folk",\r\n            "Folk-Rock",\r\n            "National Folk",\r\n            "Swing",\r\n            "Fast Fusion",\r\n            "Bebob",\r\n            "Latin",\r\n            "Revival",\r\n            "Celtic",\r\n            "Bluegrass",\r\n            "Avantgarde",\r\n            "Gothic Rock",\r\n            "Progressive Rock",\r\n            "Psychedelic Rock",\r\n            "Symphonic Rock",\r\n            "Slow Rock",\r\n            "Big Band",\r\n            "Chorus",\r\n            "Easy Listening",\r\n            "Acoustic",\r\n            "Humour",\r\n            "Speech",\r\n            "Chanson",\r\n            "Opera",\r\n            "Chamber Music",\r\n            "Sonata",\r\n            "Symphony",\r\n            "Booty Bass",\r\n            "Primus",\r\n            "Porn Groove",\r\n            "Satire",\r\n            "Slow Jam",\r\n            "Club",\r\n            "Tango",\r\n            "Samba",\r\n            "Folklore",\r\n            "Ballad",\r\n            "Power Ballad",\r\n            "Rhythmic Soul",\r\n            "Freestyle",\r\n            "Duet",\r\n            "Punk Rock",\r\n            "Drum Solo",\r\n            "Acapella",\r\n            "Euro-House",\r\n            "Dance Hall",\r\n          ];\r\n          module.exports = ID3v1TagReader;\r\n        },\r\n        { "./MediaFileReader": 11, "./MediaTagReader": 12 },\r\n      ],\r\n      8: [\r\n        function (require, module, exports) {\r\n          "use strict";\r\n\r\n          function _classCallCheck(instance, Constructor) {\r\n            if (!(instance instanceof Constructor)) {\r\n              throw new TypeError("Cannot call a class as a function");\r\n            }\r\n          }\r\n\r\n          function _defineProperties(target, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n              var descriptor = props[i];\r\n              descriptor.enumerable = descriptor.enumerable || false;\r\n              descriptor.configurable = true;\r\n              if ("value" in descriptor) descriptor.writable = true;\r\n              Object.defineProperty(target, descriptor.key, descriptor);\r\n            }\r\n          }\r\n\r\n          function _createClass(Constructor, protoProps, staticProps) {\r\n            if (protoProps)\r\n              _defineProperties(Constructor.prototype, protoProps);\r\n            if (staticProps) _defineProperties(Constructor, staticProps);\r\n            return Constructor;\r\n          }\r\n\r\n          var MediaFileReader = require("./MediaFileReader");\r\n\r\n          var StringUtils = require("./StringUtils");\r\n\r\n          var ArrayFileReader = require("./ArrayFileReader");\r\n\r\n          var FRAME_DESCRIPTIONS = {\r\n            // v2.2\r\n            BUF: "Recommended buffer size",\r\n            CNT: "Play counter",\r\n            COM: "Comments",\r\n            CRA: "Audio encryption",\r\n            CRM: "Encrypted meta frame",\r\n            ETC: "Event timing codes",\r\n            EQU: "Equalization",\r\n            GEO: "General encapsulated object",\r\n            IPL: "Involved people list",\r\n            LNK: "Linked information",\r\n            MCI: "Music CD Identifier",\r\n            MLL: "MPEG location lookup table",\r\n            PIC: "Attached picture",\r\n            POP: "Popularimeter",\r\n            REV: "Reverb",\r\n            RVA: "Relative volume adjustment",\r\n            SLT: "Synchronized lyric/text",\r\n            STC: "Synced tempo codes",\r\n            TAL: "Album/Movie/Show title",\r\n            TBP: "BPM (Beats Per Minute)",\r\n            TCM: "Composer",\r\n            TCO: "Content type",\r\n            TCR: "Copyright message",\r\n            TDA: "Date",\r\n            TDY: "Playlist delay",\r\n            TEN: "Encoded by",\r\n            TFT: "File type",\r\n            TIM: "Time",\r\n            TKE: "Initial key",\r\n            TLA: "Language(s)",\r\n            TLE: "Length",\r\n            TMT: "Media type",\r\n            TOA: "Original artist(s)/performer(s)",\r\n            TOF: "Original filename",\r\n            TOL: "Original Lyricist(s)/text writer(s)",\r\n            TOR: "Original release year",\r\n            TOT: "Original album/Movie/Show title",\r\n            TP1: "Lead artist(s)/Lead performer(s)/Soloist(s)/Performing group",\r\n            TP2: "Band/Orchestra/Accompaniment",\r\n            TP3: "Conductor/Performer refinement",\r\n            TP4: "Interpreted, remixed, or otherwise modified by",\r\n            TPA: "Part of a set",\r\n            TPB: "Publisher",\r\n            TRC: "ISRC (International Standard Recording Code)",\r\n            TRD: "Recording dates",\r\n            TRK: "Track number/Position in set",\r\n            TSI: "Size",\r\n            TSS: "Software/hardware and settings used for encoding",\r\n            TT1: "Content group description",\r\n            TT2: "Title/Songname/Content description",\r\n            TT3: "Subtitle/Description refinement",\r\n            TXT: "Lyricist/text writer",\r\n            TXX: "User defined text information frame",\r\n            TYE: "Year",\r\n            UFI: "Unique file identifier",\r\n            ULT: "Unsychronized lyric/text transcription",\r\n            WAF: "Official audio file webpage",\r\n            WAR: "Official artist/performer webpage",\r\n            WAS: "Official audio source webpage",\r\n            WCM: "Commercial information",\r\n            WCP: "Copyright/Legal information",\r\n            WPB: "Publishers official webpage",\r\n            WXX: "User defined URL link frame",\r\n            // v2.3\r\n            AENC: "Audio encryption",\r\n            APIC: "Attached picture",\r\n            ASPI: "Audio seek point index",\r\n            CHAP: "Chapter",\r\n            CTOC: "Table of contents",\r\n            COMM: "Comments",\r\n            COMR: "Commercial frame",\r\n            ENCR: "Encryption method registration",\r\n            EQU2: "Equalisation (2)",\r\n            EQUA: "Equalization",\r\n            ETCO: "Event timing codes",\r\n            GEOB: "General encapsulated object",\r\n            GRID: "Group identification registration",\r\n            IPLS: "Involved people list",\r\n            LINK: "Linked information",\r\n            MCDI: "Music CD identifier",\r\n            MLLT: "MPEG location lookup table",\r\n            OWNE: "Ownership frame",\r\n            PRIV: "Private frame",\r\n            PCNT: "Play counter",\r\n            POPM: "Popularimeter",\r\n            POSS: "Position synchronisation frame",\r\n            RBUF: "Recommended buffer size",\r\n            RVA2: "Relative volume adjustment (2)",\r\n            RVAD: "Relative volume adjustment",\r\n            RVRB: "Reverb",\r\n            SEEK: "Seek frame",\r\n            SYLT: "Synchronized lyric/text",\r\n            SYTC: "Synchronized tempo codes",\r\n            TALB: "Album/Movie/Show title",\r\n            TBPM: "BPM (beats per minute)",\r\n            TCOM: "Composer",\r\n            TCON: "Content type",\r\n            TCOP: "Copyright message",\r\n            TDAT: "Date",\r\n            TDLY: "Playlist delay",\r\n            TDRC: "Recording time",\r\n            TDRL: "Release time",\r\n            TDTG: "Tagging time",\r\n            TENC: "Encoded by",\r\n            TEXT: "Lyricist/Text writer",\r\n            TFLT: "File type",\r\n            TIME: "Time",\r\n            TIPL: "Involved people list",\r\n            TIT1: "Content group description",\r\n            TIT2: "Title/songname/content description",\r\n            TIT3: "Subtitle/Description refinement",\r\n            TKEY: "Initial key",\r\n            TLAN: "Language(s)",\r\n            TLEN: "Length",\r\n            TMCL: "Musician credits list",\r\n            TMED: "Media type",\r\n            TMOO: "Mood",\r\n            TOAL: "Original album/movie/show title",\r\n            TOFN: "Original filename",\r\n            TOLY: "Original lyricist(s)/text writer(s)",\r\n            TOPE: "Original artist(s)/performer(s)",\r\n            TORY: "Original release year",\r\n            TOWN: "File owner/licensee",\r\n            TPE1: "Lead performer(s)/Soloist(s)",\r\n            TPE2: "Band/orchestra/accompaniment",\r\n            TPE3: "Conductor/performer refinement",\r\n            TPE4: "Interpreted, remixed, or otherwise modified by",\r\n            TPOS: "Part of a set",\r\n            TPRO: "Produced notice",\r\n            TPUB: "Publisher",\r\n            TRCK: "Track number/Position in set",\r\n            TRDA: "Recording dates",\r\n            TRSN: "Internet radio station name",\r\n            TRSO: "Internet radio station owner",\r\n            TSOA: "Album sort order",\r\n            TSOP: "Performer sort order",\r\n            TSOT: "Title sort order",\r\n            TSIZ: "Size",\r\n            TSRC: "ISRC (international standard recording code)",\r\n            TSSE: "Software/Hardware and settings used for encoding",\r\n            TSST: "Set subtitle",\r\n            TYER: "Year",\r\n            TXXX: "User defined text information frame",\r\n            UFID: "Unique file identifier",\r\n            USER: "Terms of use",\r\n            USLT: "Unsychronized lyric/text transcription",\r\n            WCOM: "Commercial information",\r\n            WCOP: "Copyright/Legal information",\r\n            WOAF: "Official audio file webpage",\r\n            WOAR: "Official artist/performer webpage",\r\n            WOAS: "Official audio source webpage",\r\n            WORS: "Official internet radio station homepage",\r\n            WPAY: "Payment",\r\n            WPUB: "Publishers official webpage",\r\n            WXXX: "User defined URL link frame",\r\n          };\r\n\r\n          var ID3v2FrameReader = /*#__PURE__*/ (function () {\r\n            function ID3v2FrameReader() {\r\n              _classCallCheck(this, ID3v2FrameReader);\r\n            }\r\n\r\n            _createClass(ID3v2FrameReader, null, [\r\n              {\r\n                key: "getFrameReaderFunction",\r\n                value: function getFrameReaderFunction(frameId) {\r\n                  if (frameId in frameReaderFunctions) {\r\n                    return frameReaderFunctions[frameId];\r\n                  } else if (frameId[0] === "T") {\r\n                    // All frame ids starting with T are text tags.\r\n                    return frameReaderFunctions["T*"];\r\n                  } else if (frameId[0] === "W") {\r\n                    // All frame ids starting with W are url tags.\r\n                    return frameReaderFunctions["W*"];\r\n                  } else {\r\n                    return null;\r\n                  }\r\n                },\r\n                /**\r\n                 * All the frames consists of a frame header followed by one or more fields\r\n                 * containing the actual information.\r\n                 * The frame ID made out of the characters capital A-Z and 0-9. Identifiers\r\n                 * beginning with "X", "Y" and "Z" are for experimental use and free for\r\n                 * everyone to use, without the need to set the experimental bit in the tag\r\n                 * header. Have in mind that someone else might have used the same identifier\r\n                 * as you. All other identifiers are either used or reserved for future use.\r\n                 * The frame ID is followed by a size descriptor, making a total header size\r\n                 * of ten bytes in every frame. The size is calculated as frame size excluding\r\n                 * frame header (frame size - 10).\r\n                 */\r\n              },\r\n              {\r\n                key: "readFrames",\r\n                value: function readFrames(offset, end, data, id3header, tags) {\r\n                  var frames = {};\r\n\r\n                  var frameHeaderSize = this._getFrameHeaderSize(id3header); // console.log(\'header\', id3header);\r\n\r\n                  while (\r\n                    // we should be able to read at least the frame header\r\n                    offset <\r\n                    end - frameHeaderSize\r\n                  ) {\r\n                    var header = this._readFrameHeader(data, offset, id3header);\r\n\r\n                    var frameId = header.id; // No frame ID sometimes means it\'s the last frame (GTFO).\r\n\r\n                    if (!frameId) {\r\n                      break;\r\n                    }\r\n\r\n                    var flags = header.flags;\r\n                    var frameSize = header.size;\r\n                    var frameDataOffset = offset + header.headerSize;\r\n                    var frameData = data; // console.log(offset, frameId, header.size + header.headerSize, flags && flags.format.unsynchronisation);\r\n                    // advance data offset to the next frame data\r\n\r\n                    offset += header.headerSize + header.size; // skip unwanted tags\r\n\r\n                    if (tags && tags.indexOf(frameId) === -1) {\r\n                      continue;\r\n                    } // Workaround: MP3ext V3.3.17 places a non-compliant padding string at\r\n                    // the end of the ID3v2 header. A string like "MP3ext V3.3.19(ansi)"\r\n                    // is added multiple times at the end of the ID3 tag. More information\r\n                    // about this issue can be found at\r\n                    // https://github.com/aadsm/jsmediatags/issues/58#issuecomment-313865336\r\n\r\n                    if (\r\n                      frameId === "MP3e" ||\r\n                      frameId === "\\x00MP3" ||\r\n                      frameId === "\\x00\\x00MP" ||\r\n                      frameId === " MP3"\r\n                    ) {\r\n                      break;\r\n                    }\r\n\r\n                    var unsyncData;\r\n\r\n                    if (\r\n                      flags &&\r\n                      flags.format.unsynchronisation &&\r\n                      !id3header.flags.unsynchronisation\r\n                    ) {\r\n                      frameData = this.getUnsyncFileReader(\r\n                        frameData,\r\n                        frameDataOffset,\r\n                        frameSize\r\n                      );\r\n                      frameDataOffset = 0;\r\n                      frameSize = frameData.getSize();\r\n                    } // the first 4 bytes are the real data size\r\n                    // (after unsynchronisation && encryption)\r\n\r\n                    if (flags && flags.format.data_length_indicator) {\r\n                      // var frameDataSize = frameData.getSynchsafeInteger32At(frameDataOffset);\r\n                      frameDataOffset += 4;\r\n                      frameSize -= 4;\r\n                    }\r\n\r\n                    var readFrameFunc =\r\n                      ID3v2FrameReader.getFrameReaderFunction(frameId);\r\n                    var parsedData = readFrameFunc\r\n                      ? readFrameFunc.apply(this, [\r\n                          frameDataOffset,\r\n                          frameSize,\r\n                          frameData,\r\n                          flags,\r\n                          id3header,\r\n                        ])\r\n                      : null;\r\n\r\n                    var desc = this._getFrameDescription(frameId);\r\n\r\n                    var frame = {\r\n                      id: frameId,\r\n                      size: frameSize,\r\n                      description: desc,\r\n                      data: parsedData,\r\n                    };\r\n\r\n                    if (frameId in frames) {\r\n                      if (frames[frameId].id) {\r\n                        frames[frameId] = [frames[frameId]];\r\n                      }\r\n\r\n                      frames[frameId].push(frame);\r\n                    } else {\r\n                      frames[frameId] = frame;\r\n                    }\r\n                  }\r\n\r\n                  return frames;\r\n                },\r\n              },\r\n              {\r\n                key: "_getFrameHeaderSize",\r\n                value: function _getFrameHeaderSize(id3header) {\r\n                  var major = id3header.major;\r\n\r\n                  if (major == 2) {\r\n                    return 6;\r\n                  } else if (major == 3 || major == 4) {\r\n                    return 10;\r\n                  } else {\r\n                    return 0;\r\n                  }\r\n                },\r\n              },\r\n              {\r\n                key: "_readFrameHeader",\r\n                value: function _readFrameHeader(data, offset, id3header) {\r\n                  var major = id3header.major;\r\n                  var flags = null;\r\n\r\n                  var frameHeaderSize = this._getFrameHeaderSize(id3header);\r\n\r\n                  switch (major) {\r\n                    case 2:\r\n                      var frameId = data.getStringAt(offset, 3);\r\n                      var frameSize = data.getInteger24At(offset + 3, true);\r\n                      break;\r\n\r\n                    case 3:\r\n                      var frameId = data.getStringAt(offset, 4);\r\n                      var frameSize = data.getLongAt(offset + 4, true);\r\n                      break;\r\n\r\n                    case 4:\r\n                      var frameId = data.getStringAt(offset, 4);\r\n                      var frameSize = data.getSynchsafeInteger32At(offset + 4);\r\n                      break;\r\n                  }\r\n\r\n                  if (\r\n                    frameId == String.fromCharCode(0, 0, 0) ||\r\n                    frameId == String.fromCharCode(0, 0, 0, 0)\r\n                  ) {\r\n                    frameId = "";\r\n                  } // if frameId is empty then it\'s the last frame\r\n\r\n                  if (frameId) {\r\n                    // read frame message and format flags\r\n                    if (major > 2) {\r\n                      flags = this._readFrameFlags(data, offset + 8);\r\n                    }\r\n                  }\r\n\r\n                  return {\r\n                    id: frameId || "",\r\n                    size: frameSize || 0,\r\n                    headerSize: frameHeaderSize || 0,\r\n                    flags: flags,\r\n                  };\r\n                },\r\n              },\r\n              {\r\n                key: "_readFrameFlags",\r\n                value: function _readFrameFlags(data, offset) {\r\n                  return {\r\n                    message: {\r\n                      tag_alter_preservation: data.isBitSetAt(offset, 6),\r\n                      file_alter_preservation: data.isBitSetAt(offset, 5),\r\n                      read_only: data.isBitSetAt(offset, 4),\r\n                    },\r\n                    format: {\r\n                      grouping_identity: data.isBitSetAt(offset + 1, 7),\r\n                      compression: data.isBitSetAt(offset + 1, 3),\r\n                      encryption: data.isBitSetAt(offset + 1, 2),\r\n                      unsynchronisation: data.isBitSetAt(offset + 1, 1),\r\n                      data_length_indicator: data.isBitSetAt(offset + 1, 0),\r\n                    },\r\n                  };\r\n                },\r\n              },\r\n              {\r\n                key: "_getFrameDescription",\r\n                value: function _getFrameDescription(frameId) {\r\n                  if (frameId in FRAME_DESCRIPTIONS) {\r\n                    return FRAME_DESCRIPTIONS[frameId];\r\n                  } else {\r\n                    return "Unknown";\r\n                  }\r\n                },\r\n              },\r\n              {\r\n                key: "getUnsyncFileReader",\r\n                value: function getUnsyncFileReader(data, offset, size) {\r\n                  var frameData = data.getBytesAt(offset, size);\r\n\r\n                  for (var i = 0; i < frameData.length - 1; i++) {\r\n                    if (frameData[i] === 0xff && frameData[i + 1] === 0x00) {\r\n                      frameData.splice(i + 1, 1);\r\n                    }\r\n                  }\r\n\r\n                  return new ArrayFileReader(frameData);\r\n                },\r\n              },\r\n            ]);\r\n\r\n            return ID3v2FrameReader;\r\n          })();\r\n\r\n          var frameReaderFunctions = {};\r\n\r\n          frameReaderFunctions["APIC"] = function readPictureFrame(\r\n            offset,\r\n            length,\r\n            data,\r\n            flags,\r\n            id3header\r\n          ) {\r\n            var start = offset;\r\n            var charset = getTextEncoding(data.getByteAt(offset));\r\n\r\n            switch (id3header && id3header.major) {\r\n              case 2:\r\n                var format = data.getStringAt(offset + 1, 3);\r\n                offset += 4;\r\n                break;\r\n\r\n              case 3:\r\n              case 4:\r\n                var format = data.getStringWithCharsetAt(\r\n                  offset + 1,\r\n                  length - 1\r\n                );\r\n                offset += 1 + format.bytesReadCount;\r\n                break;\r\n\r\n              default:\r\n                throw new Error("Couldn\'t read ID3v2 major version.");\r\n            }\r\n\r\n            var bite = data.getByteAt(offset);\r\n            var type = PICTURE_TYPE[bite];\r\n            var desc = data.getStringWithCharsetAt(\r\n              offset + 1,\r\n              length - (offset - start) - 1,\r\n              charset\r\n            );\r\n            offset += 1 + desc.bytesReadCount;\r\n            return {\r\n              format: format.toString(),\r\n              type: type,\r\n              description: desc.toString(),\r\n              data: data.getBytesAt(offset, start + length - offset),\r\n            };\r\n          }; // ID3v2 chapters according to http://id3.org/id3v2-chapters-1.0\r\n\r\n          frameReaderFunctions["CHAP"] = function readChapterFrame(\r\n            offset,\r\n            length,\r\n            data,\r\n            flags,\r\n            id3header\r\n          ) {\r\n            var originalOffset = offset;\r\n            var result = {};\r\n            var id = StringUtils.readNullTerminatedString(\r\n              data.getBytesAt(offset, length)\r\n            );\r\n            result.id = id.toString();\r\n            offset += id.bytesReadCount;\r\n            result.startTime = data.getLongAt(offset, true);\r\n            offset += 4;\r\n            result.endTime = data.getLongAt(offset, true);\r\n            offset += 4;\r\n            result.startOffset = data.getLongAt(offset, true);\r\n            offset += 4;\r\n            result.endOffset = data.getLongAt(offset, true);\r\n            offset += 4;\r\n            var remainingLength = length - (offset - originalOffset);\r\n            result.subFrames = this.readFrames(\r\n              offset,\r\n              offset + remainingLength,\r\n              data,\r\n              id3header\r\n            );\r\n            return result;\r\n          }; // ID3v2 table of contents according to http://id3.org/id3v2-chapters-1.0\r\n\r\n          frameReaderFunctions["CTOC"] = function readTableOfContentsFrame(\r\n            offset,\r\n            length,\r\n            data,\r\n            flags,\r\n            id3header\r\n          ) {\r\n            var originalOffset = offset;\r\n            var result = {\r\n              childElementIds: [],\r\n              id: undefined,\r\n              topLevel: undefined,\r\n              ordered: undefined,\r\n              entryCount: undefined,\r\n              subFrames: undefined,\r\n            };\r\n            var id = StringUtils.readNullTerminatedString(\r\n              data.getBytesAt(offset, length)\r\n            );\r\n            result.id = id.toString();\r\n            offset += id.bytesReadCount;\r\n            result.topLevel = data.isBitSetAt(offset, 1);\r\n            result.ordered = data.isBitSetAt(offset, 0);\r\n            offset++;\r\n            result.entryCount = data.getByteAt(offset);\r\n            offset++;\r\n\r\n            for (var i = 0; i < result.entryCount; i++) {\r\n              var childId = StringUtils.readNullTerminatedString(\r\n                data.getBytesAt(offset, length - (offset - originalOffset))\r\n              );\r\n              result.childElementIds.push(childId.toString());\r\n              offset += childId.bytesReadCount;\r\n            }\r\n\r\n            var remainingLength = length - (offset - originalOffset);\r\n            result.subFrames = this.readFrames(\r\n              offset,\r\n              offset + remainingLength,\r\n              data,\r\n              id3header\r\n            );\r\n            return result;\r\n          };\r\n\r\n          frameReaderFunctions["COMM"] = function readCommentsFrame(\r\n            offset,\r\n            length,\r\n            data,\r\n            flags,\r\n            id3header\r\n          ) {\r\n            var start = offset;\r\n            var charset = getTextEncoding(data.getByteAt(offset));\r\n            var language = data.getStringAt(offset + 1, 3);\r\n            var shortdesc = data.getStringWithCharsetAt(\r\n              offset + 4,\r\n              length - 4,\r\n              charset\r\n            );\r\n            offset += 4 + shortdesc.bytesReadCount;\r\n            var text = data.getStringWithCharsetAt(\r\n              offset,\r\n              start + length - offset,\r\n              charset\r\n            );\r\n            return {\r\n              language: language,\r\n              short_description: shortdesc.toString(),\r\n              text: text.toString(),\r\n            };\r\n          };\r\n\r\n          frameReaderFunctions["COM"] = frameReaderFunctions["COMM"];\r\n\r\n          frameReaderFunctions["PIC"] = function (\r\n            offset,\r\n            length,\r\n            data,\r\n            flags,\r\n            id3header\r\n          ) {\r\n            return frameReaderFunctions["APIC"](\r\n              offset,\r\n              length,\r\n              data,\r\n              flags,\r\n              id3header\r\n            );\r\n          };\r\n\r\n          frameReaderFunctions["PCNT"] = function readCounterFrame(\r\n            offset,\r\n            length,\r\n            data,\r\n            flags,\r\n            id3header\r\n          ) {\r\n            // FIXME: implement the rest of the spec\r\n            return data.getLongAt(offset, false);\r\n          };\r\n\r\n          frameReaderFunctions["CNT"] = frameReaderFunctions["PCNT"];\r\n\r\n          frameReaderFunctions["T*"] = function readTextFrame(\r\n            offset,\r\n            length,\r\n            data,\r\n            flags,\r\n            id3header\r\n          ) {\r\n            var charset = getTextEncoding(data.getByteAt(offset));\r\n            return data\r\n              .getStringWithCharsetAt(offset + 1, length - 1, charset)\r\n              .toString();\r\n          };\r\n\r\n          frameReaderFunctions["TXXX"] = function readTextFrame(\r\n            offset,\r\n            length,\r\n            data,\r\n            flags,\r\n            id3header\r\n          ) {\r\n            var charset = getTextEncoding(data.getByteAt(offset));\r\n            return getUserDefinedFields(offset, length, data, charset);\r\n          };\r\n\r\n          frameReaderFunctions["WXXX"] = function readUrlFrame(\r\n            offset,\r\n            length,\r\n            data,\r\n            flags,\r\n            id3header\r\n          ) {\r\n            if (length === 0) {\r\n              return null;\r\n            }\r\n\r\n            var charset = getTextEncoding(data.getByteAt(offset));\r\n            return getUserDefinedFields(offset, length, data, charset);\r\n          };\r\n\r\n          frameReaderFunctions["W*"] = function readUrlFrame(\r\n            offset,\r\n            length,\r\n            data,\r\n            flags,\r\n            id3header\r\n          ) {\r\n            if (length === 0) {\r\n              return null;\r\n            }\r\n\r\n            return data\r\n              .getStringWithCharsetAt(offset, length, "iso-8859-1")\r\n              .toString();\r\n          };\r\n\r\n          frameReaderFunctions["TCON"] = function readGenreFrame(\r\n            offset,\r\n            length,\r\n            data,\r\n            flags\r\n          ) {\r\n            var text = frameReaderFunctions["T*"].apply(this, arguments);\r\n            return text.replace(/^\\(\\d+\\)/, "");\r\n          };\r\n\r\n          frameReaderFunctions["TCO"] = frameReaderFunctions["TCON"];\r\n\r\n          frameReaderFunctions["USLT"] = function readLyricsFrame(\r\n            offset,\r\n            length,\r\n            data,\r\n            flags,\r\n            id3header\r\n          ) {\r\n            var start = offset;\r\n            var charset = getTextEncoding(data.getByteAt(offset));\r\n            var language = data.getStringAt(offset + 1, 3);\r\n            var descriptor = data.getStringWithCharsetAt(\r\n              offset + 4,\r\n              length - 4,\r\n              charset\r\n            );\r\n            offset += 4 + descriptor.bytesReadCount;\r\n            var lyrics = data.getStringWithCharsetAt(\r\n              offset,\r\n              start + length - offset,\r\n              charset\r\n            );\r\n            return {\r\n              language: language,\r\n              descriptor: descriptor.toString(),\r\n              lyrics: lyrics.toString(),\r\n            };\r\n          };\r\n\r\n          frameReaderFunctions["ULT"] = frameReaderFunctions["USLT"];\r\n\r\n          frameReaderFunctions["UFID"] = function readLyricsFrame(\r\n            offset,\r\n            length,\r\n            data,\r\n            flags,\r\n            id3header\r\n          ) {\r\n            var ownerIdentifier = StringUtils.readNullTerminatedString(\r\n              data.getBytesAt(offset, length)\r\n            );\r\n            offset += ownerIdentifier.bytesReadCount;\r\n            var identifier = data.getBytesAt(\r\n              offset,\r\n              length - ownerIdentifier.bytesReadCount\r\n            );\r\n            return {\r\n              ownerIdentifier: ownerIdentifier.toString(),\r\n              identifier: identifier,\r\n            };\r\n          };\r\n\r\n          function getTextEncoding(bite) {\r\n            var charset;\r\n\r\n            switch (bite) {\r\n              case 0x00:\r\n                charset = "iso-8859-1";\r\n                break;\r\n\r\n              case 0x01:\r\n                charset = "utf-16";\r\n                break;\r\n\r\n              case 0x02:\r\n                charset = "utf-16be";\r\n                break;\r\n\r\n              case 0x03:\r\n                charset = "utf-8";\r\n                break;\r\n\r\n              default:\r\n                charset = "iso-8859-1";\r\n            }\r\n\r\n            return charset;\r\n          } // Handles reading description/data from either http://id3.org/id3v2.3.0#User_defined_text_information_frame\r\n          // and http://id3.org/id3v2.3.0#User_defined_URL_link_frame\r\n\r\n          function getUserDefinedFields(offset, length, data, charset) {\r\n            var userDesc = data.getStringWithCharsetAt(\r\n              offset + 1,\r\n              length - 1,\r\n              charset\r\n            );\r\n            var userDefinedData = data.getStringWithCharsetAt(\r\n              offset + 1 + userDesc.bytesReadCount,\r\n              length - 1 - userDesc.bytesReadCount,\r\n              charset\r\n            );\r\n            return {\r\n              user_description: userDesc.toString(),\r\n              data: userDefinedData.toString(),\r\n            };\r\n          }\r\n\r\n          var PICTURE_TYPE = [\r\n            "Other",\r\n            "32x32 pixels \'file icon\' (PNG only)",\r\n            "Other file icon",\r\n            "Cover (front)",\r\n            "Cover (back)",\r\n            "Leaflet page",\r\n            "Media (e.g. label side of CD)",\r\n            "Lead artist/lead performer/soloist",\r\n            "Artist/performer",\r\n            "Conductor",\r\n            "Band/Orchestra",\r\n            "Composer",\r\n            "Lyricist/text writer",\r\n            "Recording Location",\r\n            "During recording",\r\n            "During performance",\r\n            "Movie/video screen capture",\r\n            "A bright coloured fish",\r\n            "Illustration",\r\n            "Band/artist logotype",\r\n            "Publisher/Studio logotype",\r\n          ];\r\n          module.exports = ID3v2FrameReader;\r\n        },\r\n        {\r\n          "./ArrayFileReader": 3,\r\n          "./MediaFileReader": 11,\r\n          "./StringUtils": 13,\r\n        },\r\n      ],\r\n      9: [\r\n        function (require, module, exports) {\r\n          "use strict";\r\n\r\n          function _typeof(obj) {\r\n            "@babel/helpers - typeof";\r\n            if (\r\n              typeof Symbol === "function" &&\r\n              typeof Symbol.iterator === "symbol"\r\n            ) {\r\n              _typeof = function _typeof(obj) {\r\n                return typeof obj;\r\n              };\r\n            } else {\r\n              _typeof = function _typeof(obj) {\r\n                return obj &&\r\n                  typeof Symbol === "function" &&\r\n                  obj.constructor === Symbol &&\r\n                  obj !== Symbol.prototype\r\n                  ? "symbol"\r\n                  : typeof obj;\r\n              };\r\n            }\r\n            return _typeof(obj);\r\n          }\r\n\r\n          function _classCallCheck(instance, Constructor) {\r\n            if (!(instance instanceof Constructor)) {\r\n              throw new TypeError("Cannot call a class as a function");\r\n            }\r\n          }\r\n\r\n          function _defineProperties(target, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n              var descriptor = props[i];\r\n              descriptor.enumerable = descriptor.enumerable || false;\r\n              descriptor.configurable = true;\r\n              if ("value" in descriptor) descriptor.writable = true;\r\n              Object.defineProperty(target, descriptor.key, descriptor);\r\n            }\r\n          }\r\n\r\n          function _createClass(Constructor, protoProps, staticProps) {\r\n            if (protoProps)\r\n              _defineProperties(Constructor.prototype, protoProps);\r\n            if (staticProps) _defineProperties(Constructor, staticProps);\r\n            return Constructor;\r\n          }\r\n\r\n          function _inherits(subClass, superClass) {\r\n            if (typeof superClass !== "function" && superClass !== null) {\r\n              throw new TypeError(\r\n                "Super expression must either be null or a function"\r\n              );\r\n            }\r\n            subClass.prototype = Object.create(\r\n              superClass && superClass.prototype,\r\n              {\r\n                constructor: {\r\n                  value: subClass,\r\n                  writable: true,\r\n                  configurable: true,\r\n                },\r\n              }\r\n            );\r\n            if (superClass) _setPrototypeOf(subClass, superClass);\r\n          }\r\n\r\n          function _setPrototypeOf(o, p) {\r\n            _setPrototypeOf =\r\n              Object.setPrototypeOf ||\r\n              function _setPrototypeOf(o, p) {\r\n                o.__proto__ = p;\r\n                return o;\r\n              };\r\n            return _setPrototypeOf(o, p);\r\n          }\r\n\r\n          function _createSuper(Derived) {\r\n            var hasNativeReflectConstruct = _isNativeReflectConstruct();\r\n            return function _createSuperInternal() {\r\n              var Super = _getPrototypeOf(Derived),\r\n                result;\r\n              if (hasNativeReflectConstruct) {\r\n                var NewTarget = _getPrototypeOf(this).constructor;\r\n                result = Reflect.construct(Super, arguments, NewTarget);\r\n              } else {\r\n                result = Super.apply(this, arguments);\r\n              }\r\n              return _possibleConstructorReturn(this, result);\r\n            };\r\n          }\r\n\r\n          function _possibleConstructorReturn(self, call) {\r\n            if (\r\n              call &&\r\n              (_typeof(call) === "object" || typeof call === "function")\r\n            ) {\r\n              return call;\r\n            }\r\n            return _assertThisInitialized(self);\r\n          }\r\n\r\n          function _assertThisInitialized(self) {\r\n            if (self === void 0) {\r\n              throw new ReferenceError(\r\n                "this hasn\'t been initialised - super() hasn\'t been called"\r\n              );\r\n            }\r\n            return self;\r\n          }\r\n\r\n          function _isNativeReflectConstruct() {\r\n            if (typeof Reflect === "undefined" || !Reflect.construct)\r\n              return false;\r\n            if (Reflect.construct.sham) return false;\r\n            if (typeof Proxy === "function") return true;\r\n            try {\r\n              Boolean.prototype.valueOf.call(\r\n                Reflect.construct(Boolean, [], function () {})\r\n              );\r\n              return true;\r\n            } catch (e) {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          function _getPrototypeOf(o) {\r\n            _getPrototypeOf = Object.setPrototypeOf\r\n              ? Object.getPrototypeOf\r\n              : function _getPrototypeOf(o) {\r\n                  return o.__proto__ || Object.getPrototypeOf(o);\r\n                };\r\n            return _getPrototypeOf(o);\r\n          }\r\n\r\n          var MediaTagReader = require("./MediaTagReader");\r\n\r\n          var MediaFileReader = require("./MediaFileReader");\r\n\r\n          var ID3v2FrameReader = require("./ID3v2FrameReader");\r\n\r\n          var ID3_HEADER_SIZE = 10;\r\n\r\n          var ID3v2TagReader = /*#__PURE__*/ (function (_MediaTagReader) {\r\n            _inherits(ID3v2TagReader, _MediaTagReader);\r\n\r\n            var _super = _createSuper(ID3v2TagReader);\r\n\r\n            function ID3v2TagReader() {\r\n              _classCallCheck(this, ID3v2TagReader);\r\n\r\n              return _super.apply(this, arguments);\r\n            }\r\n\r\n            _createClass(\r\n              ID3v2TagReader,\r\n              [\r\n                {\r\n                  key: "_loadData",\r\n                  value: function _loadData(mediaFileReader, callbacks) {\r\n                    mediaFileReader.loadRange([6, 9], {\r\n                      onSuccess: function onSuccess() {\r\n                        mediaFileReader.loadRange(\r\n                          // The tag size does not include the header size.\r\n                          [\r\n                            0,\r\n                            ID3_HEADER_SIZE +\r\n                              mediaFileReader.getSynchsafeInteger32At(6) -\r\n                              1,\r\n                          ],\r\n                          callbacks\r\n                        );\r\n                      },\r\n                      onError: callbacks.onError,\r\n                    });\r\n                  },\r\n                },\r\n                {\r\n                  key: "_parseData",\r\n                  value: function _parseData(data, tags) {\r\n                    var offset = 0;\r\n                    var major = data.getByteAt(offset + 3);\r\n\r\n                    if (major > 4) {\r\n                      return {\r\n                        type: "ID3",\r\n                        version: ">2.4",\r\n                        tags: {},\r\n                      };\r\n                    }\r\n\r\n                    var revision = data.getByteAt(offset + 4);\r\n                    var unsynch = data.isBitSetAt(offset + 5, 7);\r\n                    var xheader = data.isBitSetAt(offset + 5, 6);\r\n                    var xindicator = data.isBitSetAt(offset + 5, 5);\r\n                    var size = data.getSynchsafeInteger32At(offset + 6);\r\n                    offset += 10;\r\n\r\n                    if (xheader) {\r\n                      // We skip the extended header and don\'t offer support for it right now.\r\n                      if (major === 4) {\r\n                        var xheadersize = data.getSynchsafeInteger32At(offset);\r\n                        offset += xheadersize;\r\n                      } else {\r\n                        var xheadersize = data.getLongAt(offset, true); // The \'Extended header size\', currently 6 or 10 bytes, excludes itself.\r\n\r\n                        offset += xheadersize + 4;\r\n                      }\r\n                    }\r\n\r\n                    var id3 = {\r\n                      type: "ID3",\r\n                      version: "2." + major + "." + revision,\r\n                      major: major,\r\n                      revision: revision,\r\n                      flags: {\r\n                        unsynchronisation: unsynch,\r\n                        extended_header: xheader,\r\n                        experimental_indicator: xindicator,\r\n                        // TODO: footer_present\r\n                        footer_present: false,\r\n                      },\r\n                      size: size,\r\n                      tags: {},\r\n                    };\r\n\r\n                    if (tags) {\r\n                      var expandedTags = this._expandShortcutTags(tags);\r\n                    }\r\n\r\n                    var offsetEnd = size + 10; // When this flag is set the entire tag needs to be un-unsynchronised\r\n                    /*header size*/\r\n                    // before parsing each individual frame. Individual frame sizes might not\r\n                    // take unsynchronisation into consideration when it\'s set on the tag\r\n                    // header.\r\n\r\n                    if (id3.flags.unsynchronisation) {\r\n                      data = ID3v2FrameReader.getUnsyncFileReader(\r\n                        data,\r\n                        offset,\r\n                        size\r\n                      );\r\n                      offset = 0;\r\n                      offsetEnd = data.getSize();\r\n                    }\r\n\r\n                    var frames = ID3v2FrameReader.readFrames(\r\n                      offset,\r\n                      offsetEnd,\r\n                      data,\r\n                      id3,\r\n                      expandedTags\r\n                    ); // create shortcuts for most common data.\r\n\r\n                    for (var name in SHORTCUTS) {\r\n                      if (SHORTCUTS.hasOwnProperty(name)) {\r\n                        var frameData = this._getFrameData(\r\n                          frames,\r\n                          SHORTCUTS[name]\r\n                        );\r\n\r\n                        if (frameData) {\r\n                          id3.tags[name] = frameData;\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    for (var frame in frames) {\r\n                      if (frames.hasOwnProperty(frame)) {\r\n                        id3.tags[frame] = frames[frame];\r\n                      }\r\n                    }\r\n\r\n                    return id3;\r\n                  },\r\n                },\r\n                {\r\n                  key: "_getFrameData",\r\n                  value: function _getFrameData(frames, ids) {\r\n                    var frame;\r\n\r\n                    for (var i = 0, id; (id = ids[i]); i++) {\r\n                      if (id in frames) {\r\n                        if (frames[id] instanceof Array) {\r\n                          frame = frames[id][0];\r\n                        } else {\r\n                          frame = frames[id];\r\n                        }\r\n\r\n                        return frame.data;\r\n                      }\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  key: "getShortcuts",\r\n                  value: function getShortcuts() {\r\n                    return SHORTCUTS;\r\n                  },\r\n                },\r\n              ],\r\n              [\r\n                {\r\n                  key: "getTagIdentifierByteRange",\r\n                  value: function getTagIdentifierByteRange() {\r\n                    // ID3 header\r\n                    return {\r\n                      offset: 0,\r\n                      length: ID3_HEADER_SIZE,\r\n                    };\r\n                  },\r\n                },\r\n                {\r\n                  key: "canReadTagFormat",\r\n                  value: function canReadTagFormat(tagIdentifier) {\r\n                    var id = String.fromCharCode.apply(\r\n                      String,\r\n                      tagIdentifier.slice(0, 3)\r\n                    );\r\n                    return id === "ID3";\r\n                  },\r\n                },\r\n              ]\r\n            );\r\n\r\n            return ID3v2TagReader;\r\n          })(MediaTagReader);\r\n\r\n          var SHORTCUTS = {\r\n            title: ["TIT2", "TT2"],\r\n            artist: ["TPE1", "TP1"],\r\n            album: ["TALB", "TAL"],\r\n            year: ["TYER", "TYE"],\r\n            comment: ["COMM", "COM"],\r\n            track: ["TRCK", "TRK"],\r\n            genre: ["TCON", "TCO"],\r\n            picture: ["APIC", "PIC"],\r\n            lyrics: ["USLT", "ULT"],\r\n          };\r\n          module.exports = ID3v2TagReader;\r\n        },\r\n        {\r\n          "./ID3v2FrameReader": 8,\r\n          "./MediaFileReader": 11,\r\n          "./MediaTagReader": 12,\r\n        },\r\n      ],\r\n      10: [\r\n        function (require, module, exports) {\r\n          /**\r\n           * Support for iTunes-style m4a tags\r\n           * See:\r\n           *   http://atomicparsley.sourceforge.net/mpeg-4files.html\r\n           *   http://developer.apple.com/mac/library/documentation/QuickTime/QTFF/Metadata/Metadata.html\r\n           * Authored by Joshua Kifer <joshua.kifer gmail.com>\r\n           *\r\n           */\r\n          "use strict";\r\n\r\n          function _typeof(obj) {\r\n            "@babel/helpers - typeof";\r\n            if (\r\n              typeof Symbol === "function" &&\r\n              typeof Symbol.iterator === "symbol"\r\n            ) {\r\n              _typeof = function _typeof(obj) {\r\n                return typeof obj;\r\n              };\r\n            } else {\r\n              _typeof = function _typeof(obj) {\r\n                return obj &&\r\n                  typeof Symbol === "function" &&\r\n                  obj.constructor === Symbol &&\r\n                  obj !== Symbol.prototype\r\n                  ? "symbol"\r\n                  : typeof obj;\r\n              };\r\n            }\r\n            return _typeof(obj);\r\n          }\r\n\r\n          function _classCallCheck(instance, Constructor) {\r\n            if (!(instance instanceof Constructor)) {\r\n              throw new TypeError("Cannot call a class as a function");\r\n            }\r\n          }\r\n\r\n          function _defineProperties(target, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n              var descriptor = props[i];\r\n              descriptor.enumerable = descriptor.enumerable || false;\r\n              descriptor.configurable = true;\r\n              if ("value" in descriptor) descriptor.writable = true;\r\n              Object.defineProperty(target, descriptor.key, descriptor);\r\n            }\r\n          }\r\n\r\n          function _createClass(Constructor, protoProps, staticProps) {\r\n            if (protoProps)\r\n              _defineProperties(Constructor.prototype, protoProps);\r\n            if (staticProps) _defineProperties(Constructor, staticProps);\r\n            return Constructor;\r\n          }\r\n\r\n          function _inherits(subClass, superClass) {\r\n            if (typeof superClass !== "function" && superClass !== null) {\r\n              throw new TypeError(\r\n                "Super expression must either be null or a function"\r\n              );\r\n            }\r\n            subClass.prototype = Object.create(\r\n              superClass && superClass.prototype,\r\n              {\r\n                constructor: {\r\n                  value: subClass,\r\n                  writable: true,\r\n                  configurable: true,\r\n                },\r\n              }\r\n            );\r\n            if (superClass) _setPrototypeOf(subClass, superClass);\r\n          }\r\n\r\n          function _setPrototypeOf(o, p) {\r\n            _setPrototypeOf =\r\n              Object.setPrototypeOf ||\r\n              function _setPrototypeOf(o, p) {\r\n                o.__proto__ = p;\r\n                return o;\r\n              };\r\n            return _setPrototypeOf(o, p);\r\n          }\r\n\r\n          function _createSuper(Derived) {\r\n            var hasNativeReflectConstruct = _isNativeReflectConstruct();\r\n            return function _createSuperInternal() {\r\n              var Super = _getPrototypeOf(Derived),\r\n                result;\r\n              if (hasNativeReflectConstruct) {\r\n                var NewTarget = _getPrototypeOf(this).constructor;\r\n                result = Reflect.construct(Super, arguments, NewTarget);\r\n              } else {\r\n                result = Super.apply(this, arguments);\r\n              }\r\n              return _possibleConstructorReturn(this, result);\r\n            };\r\n          }\r\n\r\n          function _possibleConstructorReturn(self, call) {\r\n            if (\r\n              call &&\r\n              (_typeof(call) === "object" || typeof call === "function")\r\n            ) {\r\n              return call;\r\n            }\r\n            return _assertThisInitialized(self);\r\n          }\r\n\r\n          function _assertThisInitialized(self) {\r\n            if (self === void 0) {\r\n              throw new ReferenceError(\r\n                "this hasn\'t been initialised - super() hasn\'t been called"\r\n              );\r\n            }\r\n            return self;\r\n          }\r\n\r\n          function _isNativeReflectConstruct() {\r\n            if (typeof Reflect === "undefined" || !Reflect.construct)\r\n              return false;\r\n            if (Reflect.construct.sham) return false;\r\n            if (typeof Proxy === "function") return true;\r\n            try {\r\n              Boolean.prototype.valueOf.call(\r\n                Reflect.construct(Boolean, [], function () {})\r\n              );\r\n              return true;\r\n            } catch (e) {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          function _getPrototypeOf(o) {\r\n            _getPrototypeOf = Object.setPrototypeOf\r\n              ? Object.getPrototypeOf\r\n              : function _getPrototypeOf(o) {\r\n                  return o.__proto__ || Object.getPrototypeOf(o);\r\n                };\r\n            return _getPrototypeOf(o);\r\n          }\r\n\r\n          var MediaTagReader = require("./MediaTagReader");\r\n\r\n          var MediaFileReader = require("./MediaFileReader");\r\n\r\n          var MP4TagReader = /*#__PURE__*/ (function (_MediaTagReader) {\r\n            _inherits(MP4TagReader, _MediaTagReader);\r\n\r\n            var _super = _createSuper(MP4TagReader);\r\n\r\n            function MP4TagReader() {\r\n              _classCallCheck(this, MP4TagReader);\r\n\r\n              return _super.apply(this, arguments);\r\n            }\r\n\r\n            _createClass(\r\n              MP4TagReader,\r\n              [\r\n                {\r\n                  key: "_loadData",\r\n                  value: function _loadData(mediaFileReader, callbacks) {\r\n                    // MP4 metadata isn\'t located in a specific location of the file. Roughly\r\n                    // speaking, it\'s composed of blocks chained together like a linked list.\r\n                    // These blocks are called atoms (or boxes).\r\n                    // Each atom of the list can have its own child linked list. Atoms in this\r\n                    // situation do not possess any data and are called "container" as they only\r\n                    // contain other atoms.\r\n                    // Other atoms represent a particular set of data, like audio, video or\r\n                    // metadata. In order to find and load all the interesting atoms we need\r\n                    // to traverse the entire linked list of atoms and only load the ones\r\n                    // associated with metadata.\r\n                    // The metadata atoms can be find under the "moov.udta.meta.ilst" hierarchy.\r\n                    var self = this; // Load the header of the first atom\r\n\r\n                    mediaFileReader.loadRange([0, 16], {\r\n                      onSuccess: function onSuccess() {\r\n                        self._loadAtom(mediaFileReader, 0, "", callbacks);\r\n                      },\r\n                      onError: callbacks.onError,\r\n                    });\r\n                  },\r\n                },\r\n                {\r\n                  key: "_loadAtom",\r\n                  value: function _loadAtom(\r\n                    mediaFileReader,\r\n                    offset,\r\n                    parentAtomFullName,\r\n                    callbacks\r\n                  ) {\r\n                    if (offset >= mediaFileReader.getSize()) {\r\n                      callbacks.onSuccess();\r\n                      return;\r\n                    }\r\n\r\n                    var self = this; // 8 is the size of the atomSize and atomName fields.\r\n                    // When reading the current block we always read 8 more bytes in order\r\n                    // to also read the header of the next block.\r\n\r\n                    var atomSize = mediaFileReader.getLongAt(offset, true);\r\n\r\n                    if (atomSize == 0 || isNaN(atomSize)) {\r\n                      callbacks.onSuccess();\r\n                      return;\r\n                    }\r\n\r\n                    var atomName = mediaFileReader.getStringAt(offset + 4, 4); // console.log(parentAtomFullName, atomName, atomSize);\r\n                    // Container atoms (no actual data)\r\n\r\n                    if (this._isContainerAtom(atomName)) {\r\n                      if (atomName == "meta") {\r\n                        // The "meta" atom breaks convention and is a container with data.\r\n                        offset += 4; // next_item_id (uint32)\r\n                      }\r\n\r\n                      var atomFullName =\r\n                        (parentAtomFullName ? parentAtomFullName + "." : "") +\r\n                        atomName;\r\n\r\n                      if (atomFullName === "moov.udta.meta.ilst") {\r\n                        mediaFileReader.loadRange(\r\n                          [offset, offset + atomSize],\r\n                          callbacks\r\n                        );\r\n                      } else {\r\n                        mediaFileReader.loadRange(\r\n                          [offset + 8, offset + 8 + 8],\r\n                          {\r\n                            onSuccess: function onSuccess() {\r\n                              self._loadAtom(\r\n                                mediaFileReader,\r\n                                offset + 8,\r\n                                atomFullName,\r\n                                callbacks\r\n                              );\r\n                            },\r\n                            onError: callbacks.onError,\r\n                          }\r\n                        );\r\n                      }\r\n                    } else {\r\n                      mediaFileReader.loadRange(\r\n                        [offset + atomSize, offset + atomSize + 8],\r\n                        {\r\n                          onSuccess: function onSuccess() {\r\n                            self._loadAtom(\r\n                              mediaFileReader,\r\n                              offset + atomSize,\r\n                              parentAtomFullName,\r\n                              callbacks\r\n                            );\r\n                          },\r\n                          onError: callbacks.onError,\r\n                        }\r\n                      );\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  key: "_isContainerAtom",\r\n                  value: function _isContainerAtom(atomName) {\r\n                    return (\r\n                      ["moov", "udta", "meta", "ilst"].indexOf(atomName) >= 0\r\n                    );\r\n                  },\r\n                },\r\n                {\r\n                  key: "_canReadAtom",\r\n                  value: function _canReadAtom(atomName) {\r\n                    return atomName !== "----";\r\n                  },\r\n                },\r\n                {\r\n                  key: "_parseData",\r\n                  value: function _parseData(data, tagsToRead) {\r\n                    var tags = {};\r\n                    tagsToRead = this._expandShortcutTags(tagsToRead);\r\n\r\n                    this._readAtom(tags, data, 0, data.getSize(), tagsToRead); // create shortcuts for most common data.\r\n\r\n                    for (var name in SHORTCUTS) {\r\n                      if (SHORTCUTS.hasOwnProperty(name)) {\r\n                        var tag = tags[SHORTCUTS[name]];\r\n\r\n                        if (tag) {\r\n                          if (name === "track") {\r\n                            tags[name] = tag.data.track;\r\n                          } else {\r\n                            tags[name] = tag.data;\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    return {\r\n                      type: "MP4",\r\n                      ftyp: data.getStringAt(8, 4),\r\n                      version: data.getLongAt(12, true),\r\n                      tags: tags,\r\n                    };\r\n                  },\r\n                },\r\n                {\r\n                  key: "_readAtom",\r\n                  value: function _readAtom(\r\n                    tags,\r\n                    data,\r\n                    offset,\r\n                    length,\r\n                    tagsToRead,\r\n                    parentAtomFullName,\r\n                    indent\r\n                  ) {\r\n                    indent = indent === undefined ? "" : indent + "  ";\r\n                    var seek = offset;\r\n\r\n                    while (seek < offset + length) {\r\n                      var atomSize = data.getLongAt(seek, true);\r\n\r\n                      if (atomSize == 0) {\r\n                        return;\r\n                      }\r\n\r\n                      var atomName = data.getStringAt(seek + 4, 4); // console.log(seek, parentAtomFullName, atomName, atomSize);\r\n\r\n                      if (this._isContainerAtom(atomName)) {\r\n                        if (atomName == "meta") {\r\n                          seek += 4; // next_item_id (uint32)\r\n                        }\r\n\r\n                        var atomFullName =\r\n                          (parentAtomFullName ? parentAtomFullName + "." : "") +\r\n                          atomName;\r\n\r\n                        this._readAtom(\r\n                          tags,\r\n                          data,\r\n                          seek + 8,\r\n                          atomSize - 8,\r\n                          tagsToRead,\r\n                          atomFullName,\r\n                          indent\r\n                        );\r\n\r\n                        return;\r\n                      } // Value atoms\r\n\r\n                      if (\r\n                        (!tagsToRead || tagsToRead.indexOf(atomName) >= 0) &&\r\n                        parentAtomFullName === "moov.udta.meta.ilst" &&\r\n                        this._canReadAtom(atomName)\r\n                      ) {\r\n                        tags[atomName] = this._readMetadataAtom(data, seek);\r\n                      }\r\n\r\n                      seek += atomSize;\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  key: "_readMetadataAtom",\r\n                  value: function _readMetadataAtom(data, offset) {\r\n                    // 16: size + name + size + "data" (4 bytes each)\r\n                    // 8: 1 byte atom version & 3 bytes atom flags + 4 bytes NULL space\r\n                    // 8: 4 bytes track + 4 bytes total\r\n                    var METADATA_HEADER = 16;\r\n                    var atomSize = data.getLongAt(offset, true);\r\n                    var atomName = data.getStringAt(offset + 4, 4);\r\n                    var klass = data.getInteger24At(\r\n                      offset + METADATA_HEADER + 1,\r\n                      true\r\n                    );\r\n                    var type = TYPES[klass];\r\n                    var atomData;\r\n                    var bigEndian = true;\r\n\r\n                    if (atomName == "trkn") {\r\n                      atomData = {\r\n                        track: data.getShortAt(\r\n                          offset + METADATA_HEADER + 10,\r\n                          bigEndian\r\n                        ),\r\n                        total: data.getShortAt(\r\n                          offset + METADATA_HEADER + 14,\r\n                          bigEndian\r\n                        ),\r\n                      };\r\n                    } else if (atomName == "disk") {\r\n                      atomData = {\r\n                        disk: data.getShortAt(\r\n                          offset + METADATA_HEADER + 10,\r\n                          bigEndian\r\n                        ),\r\n                        total: data.getShortAt(\r\n                          offset + METADATA_HEADER + 14,\r\n                          bigEndian\r\n                        ),\r\n                      };\r\n                    } else {\r\n                      // 4: atom version (1 byte) + atom flags (3 bytes)\r\n                      // 4: NULL (usually locale indicator)\r\n                      var atomHeader = METADATA_HEADER + 4 + 4;\r\n                      var dataStart = offset + atomHeader;\r\n                      var dataLength = atomSize - atomHeader;\r\n                      var atomData; // Workaround for covers being parsed as \'uint8\' type despite being an \'covr\' atom\r\n\r\n                      if (atomName === "covr" && type === "uint8") {\r\n                        type = "jpeg";\r\n                      }\r\n\r\n                      switch (type) {\r\n                        case "text":\r\n                          atomData = data\r\n                            .getStringWithCharsetAt(\r\n                              dataStart,\r\n                              dataLength,\r\n                              "utf-8"\r\n                            )\r\n                            .toString();\r\n                          break;\r\n\r\n                        case "uint8":\r\n                          atomData = data.getShortAt(dataStart, false);\r\n                          break;\r\n\r\n                        case "int":\r\n                        case "uint":\r\n                          // Though the QuickTime spec doesn\'t state it, there are 64-bit values\r\n                          // such as plID (Playlist/Collection ID). With its single 64-bit floating\r\n                          // point number type, these are hard to parse and pass in JavaScript.\r\n                          // The high word of plID seems to always be zero, so, as this is the\r\n                          // only current 64-bit atom handled, it is parsed from its 32-bit\r\n                          // low word as an unsigned long.\r\n                          //\r\n                          var intReader =\r\n                            type == "int"\r\n                              ? dataLength == 1\r\n                                ? data.getSByteAt\r\n                                : dataLength == 2\r\n                                ? data.getSShortAt\r\n                                : dataLength == 4\r\n                                ? data.getSLongAt\r\n                                : data.getLongAt\r\n                              : dataLength == 1\r\n                              ? data.getByteAt\r\n                              : dataLength == 2\r\n                              ? data.getShortAt\r\n                              : data.getLongAt; // $FlowFixMe - getByteAt doesn\'t receive a second argument\r\n\r\n                          atomData = intReader.call(\r\n                            data,\r\n                            dataStart + (dataLength == 8 ? 4 : 0),\r\n                            true\r\n                          );\r\n                          break;\r\n\r\n                        case "jpeg":\r\n                        case "png":\r\n                          atomData = {\r\n                            format: "image/" + type,\r\n                            data: data.getBytesAt(dataStart, dataLength),\r\n                          };\r\n                          break;\r\n                      }\r\n                    }\r\n\r\n                    return {\r\n                      id: atomName,\r\n                      size: atomSize,\r\n                      description: ATOM_DESCRIPTIONS[atomName] || "Unknown",\r\n                      data: atomData,\r\n                    };\r\n                  },\r\n                },\r\n                {\r\n                  key: "getShortcuts",\r\n                  value: function getShortcuts() {\r\n                    return SHORTCUTS;\r\n                  },\r\n                },\r\n              ],\r\n              [\r\n                {\r\n                  key: "getTagIdentifierByteRange",\r\n                  value: function getTagIdentifierByteRange() {\r\n                    // The tag identifier is located in [4, 8] but since we\'ll need to reader\r\n                    // the header of the first block anyway, we load it instead to avoid\r\n                    // making two requests.\r\n                    return {\r\n                      offset: 0,\r\n                      length: 16,\r\n                    };\r\n                  },\r\n                },\r\n                {\r\n                  key: "canReadTagFormat",\r\n                  value: function canReadTagFormat(tagIdentifier) {\r\n                    var id = String.fromCharCode.apply(\r\n                      String,\r\n                      tagIdentifier.slice(4, 8)\r\n                    );\r\n                    return id === "ftyp";\r\n                  },\r\n                },\r\n              ]\r\n            );\r\n\r\n            return MP4TagReader;\r\n          })(MediaTagReader);\r\n          /*\r\n           * https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW35\r\n           */\r\n\r\n          var TYPES = {\r\n            0: "uint8",\r\n            1: "text",\r\n            13: "jpeg",\r\n            14: "png",\r\n            21: "int",\r\n            22: "uint",\r\n          };\r\n          var ATOM_DESCRIPTIONS = {\r\n            "©alb": "Album",\r\n            "©ART": "Artist",\r\n            aART: "Album Artist",\r\n            "©day": "Release Date",\r\n            "©nam": "Title",\r\n            "©gen": "Genre",\r\n            gnre: "Genre",\r\n            trkn: "Track Number",\r\n            "©wrt": "Composer",\r\n            "©too": "Encoding Tool",\r\n            "©enc": "Encoded By",\r\n            cprt: "Copyright",\r\n            covr: "Cover Art",\r\n            "©grp": "Grouping",\r\n            keyw: "Keywords",\r\n            "©lyr": "Lyrics",\r\n            "©cmt": "Comment",\r\n            tmpo: "Tempo",\r\n            cpil: "Compilation",\r\n            disk: "Disc Number",\r\n            tvsh: "TV Show Name",\r\n            tven: "TV Episode ID",\r\n            tvsn: "TV Season",\r\n            tves: "TV Episode",\r\n            tvnn: "TV Network",\r\n            desc: "Description",\r\n            ldes: "Long Description",\r\n            sonm: "Sort Name",\r\n            soar: "Sort Artist",\r\n            soaa: "Sort Album",\r\n            soco: "Sort Composer",\r\n            sosn: "Sort Show",\r\n            purd: "Purchase Date",\r\n            pcst: "Podcast",\r\n            purl: "Podcast URL",\r\n            catg: "Category",\r\n            hdvd: "HD Video",\r\n            stik: "Media Type",\r\n            rtng: "Content Rating",\r\n            pgap: "Gapless Playback",\r\n            apID: "Purchase Account",\r\n            sfID: "Country Code",\r\n            atID: "Artist ID",\r\n            cnID: "Catalog ID",\r\n            plID: "Collection ID",\r\n            geID: "Genre ID",\r\n            "xid ": "Vendor Information",\r\n            flvr: "Codec Flavor",\r\n          };\r\n          var UNSUPPORTED_ATOMS = {\r\n            "----": 1,\r\n          };\r\n          var SHORTCUTS = {\r\n            title: "©nam",\r\n            artist: "©ART",\r\n            album: "©alb",\r\n            year: "©day",\r\n            comment: "©cmt",\r\n            track: "trkn",\r\n            genre: "©gen",\r\n            picture: "covr",\r\n            lyrics: "©lyr",\r\n          };\r\n          module.exports = MP4TagReader;\r\n        },\r\n        { "./MediaFileReader": 11, "./MediaTagReader": 12 },\r\n      ],\r\n      11: [\r\n        function (require, module, exports) {\r\n          "use strict";\r\n\r\n          function _classCallCheck(instance, Constructor) {\r\n            if (!(instance instanceof Constructor)) {\r\n              throw new TypeError("Cannot call a class as a function");\r\n            }\r\n          }\r\n\r\n          function _defineProperties(target, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n              var descriptor = props[i];\r\n              descriptor.enumerable = descriptor.enumerable || false;\r\n              descriptor.configurable = true;\r\n              if ("value" in descriptor) descriptor.writable = true;\r\n              Object.defineProperty(target, descriptor.key, descriptor);\r\n            }\r\n          }\r\n\r\n          function _createClass(Constructor, protoProps, staticProps) {\r\n            if (protoProps)\r\n              _defineProperties(Constructor.prototype, protoProps);\r\n            if (staticProps) _defineProperties(Constructor, staticProps);\r\n            return Constructor;\r\n          }\r\n\r\n          function _defineProperty(obj, key, value) {\r\n            if (key in obj) {\r\n              Object.defineProperty(obj, key, {\r\n                value: value,\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n              });\r\n            } else {\r\n              obj[key] = value;\r\n            }\r\n            return obj;\r\n          }\r\n\r\n          var StringUtils = require("./StringUtils");\r\n\r\n          var MediaFileReader = /*#__PURE__*/ (function () {\r\n            function MediaFileReader(path) {\r\n              _classCallCheck(this, MediaFileReader);\r\n\r\n              _defineProperty(this, "_isInitialized", void 0);\r\n\r\n              _defineProperty(this, "_size", void 0);\r\n\r\n              this._isInitialized = false;\r\n              this._size = 0;\r\n            }\r\n            /**\r\n             * Decides if this media file reader is able to read the given file.\r\n             */\r\n\r\n            _createClass(\r\n              MediaFileReader,\r\n              [\r\n                {\r\n                  key: "init",\r\n                  value:\r\n                    /**\r\n                     * This function needs to be called before any other function.\r\n                     * Loads the necessary initial information from the file.\r\n                     */\r\n                    function init(callbacks) {\r\n                      var self = this;\r\n\r\n                      if (this._isInitialized) {\r\n                        setTimeout(callbacks.onSuccess, 1);\r\n                      } else {\r\n                        return this._init({\r\n                          onSuccess: function onSuccess() {\r\n                            self._isInitialized = true;\r\n                            callbacks.onSuccess();\r\n                          },\r\n                          onError: callbacks.onError,\r\n                        });\r\n                      }\r\n                    },\r\n                },\r\n                {\r\n                  key: "_init",\r\n                  value: function _init(callbacks) {\r\n                    throw new Error("Must implement init function");\r\n                  },\r\n                  /**\r\n                   * @param range The start and end indexes of the range to load.\r\n                   *        Ex: [0, 7] load bytes 0 to 7 inclusive.\r\n                   */\r\n                },\r\n                {\r\n                  key: "loadRange",\r\n                  value: function loadRange(range, callbacks) {\r\n                    throw new Error("Must implement loadRange function");\r\n                  },\r\n                  /**\r\n                   * @return The size of the file in bytes.\r\n                   */\r\n                },\r\n                {\r\n                  key: "getSize",\r\n                  value: function getSize() {\r\n                    if (!this._isInitialized) {\r\n                      throw new Error("init() must be called first.");\r\n                    }\r\n\r\n                    return this._size;\r\n                  },\r\n                },\r\n                {\r\n                  key: "getByteAt",\r\n                  value: function getByteAt(offset) {\r\n                    throw new Error("Must implement getByteAt function");\r\n                  },\r\n                },\r\n                {\r\n                  key: "getBytesAt",\r\n                  value: function getBytesAt(offset, length) {\r\n                    var bytes = new Array(length);\r\n\r\n                    for (var i = 0; i < length; i++) {\r\n                      bytes[i] = this.getByteAt(offset + i);\r\n                    }\r\n\r\n                    return bytes;\r\n                  },\r\n                },\r\n                {\r\n                  key: "isBitSetAt",\r\n                  value: function isBitSetAt(offset, bit) {\r\n                    var iByte = this.getByteAt(offset);\r\n                    return (iByte & (1 << bit)) != 0;\r\n                  },\r\n                },\r\n                {\r\n                  key: "getSByteAt",\r\n                  value: function getSByteAt(offset) {\r\n                    var iByte = this.getByteAt(offset);\r\n\r\n                    if (iByte > 127) {\r\n                      return iByte - 256;\r\n                    } else {\r\n                      return iByte;\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  key: "getShortAt",\r\n                  value: function getShortAt(offset, isBigEndian) {\r\n                    var iShort = isBigEndian\r\n                      ? (this.getByteAt(offset) << 8) +\r\n                        this.getByteAt(offset + 1)\r\n                      : (this.getByteAt(offset + 1) << 8) +\r\n                        this.getByteAt(offset);\r\n\r\n                    if (iShort < 0) {\r\n                      iShort += 65536;\r\n                    }\r\n\r\n                    return iShort;\r\n                  },\r\n                },\r\n                {\r\n                  key: "getSShortAt",\r\n                  value: function getSShortAt(offset, isBigEndian) {\r\n                    var iUShort = this.getShortAt(offset, isBigEndian);\r\n\r\n                    if (iUShort > 32767) {\r\n                      return iUShort - 65536;\r\n                    } else {\r\n                      return iUShort;\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  key: "getLongAt",\r\n                  value: function getLongAt(offset, isBigEndian) {\r\n                    var iByte1 = this.getByteAt(offset),\r\n                      iByte2 = this.getByteAt(offset + 1),\r\n                      iByte3 = this.getByteAt(offset + 2),\r\n                      iByte4 = this.getByteAt(offset + 3);\r\n                    var iLong = isBigEndian\r\n                      ? (((((iByte1 << 8) + iByte2) << 8) + iByte3) << 8) +\r\n                        iByte4\r\n                      : (((((iByte4 << 8) + iByte3) << 8) + iByte2) << 8) +\r\n                        iByte1;\r\n\r\n                    if (iLong < 0) {\r\n                      iLong += 4294967296;\r\n                    }\r\n\r\n                    return iLong;\r\n                  },\r\n                },\r\n                {\r\n                  key: "getSLongAt",\r\n                  value: function getSLongAt(offset, isBigEndian) {\r\n                    var iULong = this.getLongAt(offset, isBigEndian);\r\n\r\n                    if (iULong > 2147483647) {\r\n                      return iULong - 4294967296;\r\n                    } else {\r\n                      return iULong;\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  key: "getInteger24At",\r\n                  value: function getInteger24At(offset, isBigEndian) {\r\n                    var iByte1 = this.getByteAt(offset),\r\n                      iByte2 = this.getByteAt(offset + 1),\r\n                      iByte3 = this.getByteAt(offset + 2);\r\n                    var iInteger = isBigEndian\r\n                      ? (((iByte1 << 8) + iByte2) << 8) + iByte3\r\n                      : (((iByte3 << 8) + iByte2) << 8) + iByte1;\r\n\r\n                    if (iInteger < 0) {\r\n                      iInteger += 16777216;\r\n                    }\r\n\r\n                    return iInteger;\r\n                  },\r\n                },\r\n                {\r\n                  key: "getStringAt",\r\n                  value: function getStringAt(offset, length) {\r\n                    var string = [];\r\n\r\n                    for (var i = offset, j = 0; i < offset + length; i++, j++) {\r\n                      string[j] = String.fromCharCode(this.getByteAt(i));\r\n                    }\r\n\r\n                    return string.join("");\r\n                  },\r\n                },\r\n                {\r\n                  key: "getStringWithCharsetAt",\r\n                  value: function getStringWithCharsetAt(\r\n                    offset,\r\n                    length,\r\n                    charset\r\n                  ) {\r\n                    var bytes = this.getBytesAt(offset, length);\r\n                    var string;\r\n\r\n                    switch ((charset || "").toLowerCase()) {\r\n                      case "utf-16":\r\n                      case "utf-16le":\r\n                      case "utf-16be":\r\n                        string = StringUtils.readUTF16String(\r\n                          bytes,\r\n                          charset === "utf-16be"\r\n                        );\r\n                        break;\r\n\r\n                      case "utf-8":\r\n                        string = StringUtils.readUTF8String(bytes);\r\n                        break;\r\n\r\n                      default:\r\n                        string = StringUtils.readNullTerminatedString(bytes);\r\n                        break;\r\n                    }\r\n\r\n                    return string;\r\n                  },\r\n                },\r\n                {\r\n                  key: "getCharAt",\r\n                  value: function getCharAt(offset) {\r\n                    return String.fromCharCode(this.getByteAt(offset));\r\n                  },\r\n                  /**\r\n                   * The ID3v2 tag/frame size is encoded with four bytes where the most\r\n                   * significant bit (bit 7) is set to zero in every byte, making a total of 28\r\n                   * bits. The zeroed bits are ignored, so a 257 bytes long tag is represented\r\n                   * as $00 00 02 01.\r\n                   */\r\n                },\r\n                {\r\n                  key: "getSynchsafeInteger32At",\r\n                  value: function getSynchsafeInteger32At(offset) {\r\n                    var size1 = this.getByteAt(offset);\r\n                    var size2 = this.getByteAt(offset + 1);\r\n                    var size3 = this.getByteAt(offset + 2);\r\n                    var size4 = this.getByteAt(offset + 3); // 0x7f = 0b01111111\r\n\r\n                    var size =\r\n                      (size4 & 0x7f) |\r\n                      ((size3 & 0x7f) << 7) |\r\n                      ((size2 & 0x7f) << 14) |\r\n                      ((size1 & 0x7f) << 21);\r\n                    return size;\r\n                  },\r\n                },\r\n              ],\r\n              [\r\n                {\r\n                  key: "canReadFile",\r\n                  value: function canReadFile(file) {\r\n                    throw new Error("Must implement canReadFile function");\r\n                  },\r\n                },\r\n              ]\r\n            );\r\n\r\n            return MediaFileReader;\r\n          })();\r\n\r\n          module.exports = MediaFileReader;\r\n        },\r\n        { "./StringUtils": 13 },\r\n      ],\r\n      12: [\r\n        function (require, module, exports) {\r\n          "use strict";\r\n\r\n          function _classCallCheck(instance, Constructor) {\r\n            if (!(instance instanceof Constructor)) {\r\n              throw new TypeError("Cannot call a class as a function");\r\n            }\r\n          }\r\n\r\n          function _defineProperties(target, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n              var descriptor = props[i];\r\n              descriptor.enumerable = descriptor.enumerable || false;\r\n              descriptor.configurable = true;\r\n              if ("value" in descriptor) descriptor.writable = true;\r\n              Object.defineProperty(target, descriptor.key, descriptor);\r\n            }\r\n          }\r\n\r\n          function _createClass(Constructor, protoProps, staticProps) {\r\n            if (protoProps)\r\n              _defineProperties(Constructor.prototype, protoProps);\r\n            if (staticProps) _defineProperties(Constructor, staticProps);\r\n            return Constructor;\r\n          }\r\n\r\n          function _defineProperty(obj, key, value) {\r\n            if (key in obj) {\r\n              Object.defineProperty(obj, key, {\r\n                value: value,\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n              });\r\n            } else {\r\n              obj[key] = value;\r\n            }\r\n            return obj;\r\n          }\r\n\r\n          var MediaFileReader = require("./MediaFileReader");\r\n\r\n          var MediaTagReader = /*#__PURE__*/ (function () {\r\n            function MediaTagReader(mediaFileReader) {\r\n              _classCallCheck(this, MediaTagReader);\r\n\r\n              _defineProperty(this, "_mediaFileReader", void 0);\r\n\r\n              _defineProperty(this, "_tags", void 0);\r\n\r\n              this._mediaFileReader = mediaFileReader;\r\n              this._tags = null;\r\n            }\r\n            /**\r\n             * Returns the byte range that needs to be loaded and fed to\r\n             * _canReadTagFormat in order to identify if the file contains tag\r\n             * information that can be read.\r\n             */\r\n\r\n            _createClass(\r\n              MediaTagReader,\r\n              [\r\n                {\r\n                  key: "setTagsToRead",\r\n                  value: function setTagsToRead(tags) {\r\n                    this._tags = tags;\r\n                    return this;\r\n                  },\r\n                },\r\n                {\r\n                  key: "read",\r\n                  value: function read(callbacks) {\r\n                    var self = this;\r\n\r\n                    this._mediaFileReader.init({\r\n                      onSuccess: function onSuccess() {\r\n                        self._loadData(self._mediaFileReader, {\r\n                          onSuccess: function onSuccess() {\r\n                            try {\r\n                              var tags = self._parseData(\r\n                                self._mediaFileReader,\r\n                                self._tags\r\n                              );\r\n                            } catch (ex) {\r\n                              if (callbacks.onError) {\r\n                                callbacks.onError({\r\n                                  type: "parseData",\r\n                                  info: ex.message,\r\n                                });\r\n                                return;\r\n                              }\r\n                            } // TODO: destroy mediaFileReader\r\n\r\n                            callbacks.onSuccess(tags);\r\n                          },\r\n                          onError: callbacks.onError,\r\n                        });\r\n                      },\r\n                      onError: callbacks.onError,\r\n                    });\r\n                  },\r\n                },\r\n                {\r\n                  key: "getShortcuts",\r\n                  value: function getShortcuts() {\r\n                    return {};\r\n                  },\r\n                  /**\r\n                   * Load the necessary bytes from the media file.\r\n                   */\r\n                },\r\n                {\r\n                  key: "_loadData",\r\n                  value: function _loadData(mediaFileReader, callbacks) {\r\n                    throw new Error("Must implement _loadData function");\r\n                  },\r\n                  /**\r\n                   * Parse the loaded data to read the media tags.\r\n                   */\r\n                },\r\n                {\r\n                  key: "_parseData",\r\n                  value: function _parseData(mediaFileReader, tags) {\r\n                    throw new Error("Must implement _parseData function");\r\n                  },\r\n                },\r\n                {\r\n                  key: "_expandShortcutTags",\r\n                  value: function _expandShortcutTags(tagsWithShortcuts) {\r\n                    if (!tagsWithShortcuts) {\r\n                      return null;\r\n                    }\r\n\r\n                    var tags = [];\r\n                    var shortcuts = this.getShortcuts();\r\n\r\n                    for (\r\n                      var i = 0, tagOrShortcut;\r\n                      (tagOrShortcut = tagsWithShortcuts[i]);\r\n                      i++\r\n                    ) {\r\n                      tags = tags.concat(\r\n                        shortcuts[tagOrShortcut] || [tagOrShortcut]\r\n                      );\r\n                    }\r\n\r\n                    return tags;\r\n                  },\r\n                },\r\n              ],\r\n              [\r\n                {\r\n                  key: "getTagIdentifierByteRange",\r\n                  value: function getTagIdentifierByteRange() {\r\n                    throw new Error("Must implement");\r\n                  },\r\n                  /**\r\n                   * Given a tag identifier (read from the file byte positions speficied by\r\n                   * getTagIdentifierByteRange) this function checks if it can read the tag\r\n                   * format or not.\r\n                   */\r\n                },\r\n                {\r\n                  key: "canReadTagFormat",\r\n                  value: function canReadTagFormat(tagIdentifier) {\r\n                    throw new Error("Must implement");\r\n                  },\r\n                },\r\n              ]\r\n            );\r\n\r\n            return MediaTagReader;\r\n          })();\r\n\r\n          module.exports = MediaTagReader;\r\n        },\r\n        { "./MediaFileReader": 11 },\r\n      ],\r\n      13: [\r\n        function (require, module, exports) {\r\n          "use strict";\r\n\r\n          function _classCallCheck(instance, Constructor) {\r\n            if (!(instance instanceof Constructor)) {\r\n              throw new TypeError("Cannot call a class as a function");\r\n            }\r\n          }\r\n\r\n          function _defineProperties(target, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n              var descriptor = props[i];\r\n              descriptor.enumerable = descriptor.enumerable || false;\r\n              descriptor.configurable = true;\r\n              if ("value" in descriptor) descriptor.writable = true;\r\n              Object.defineProperty(target, descriptor.key, descriptor);\r\n            }\r\n          }\r\n\r\n          function _createClass(Constructor, protoProps, staticProps) {\r\n            if (protoProps)\r\n              _defineProperties(Constructor.prototype, protoProps);\r\n            if (staticProps) _defineProperties(Constructor, staticProps);\r\n            return Constructor;\r\n          }\r\n\r\n          function _defineProperty(obj, key, value) {\r\n            if (key in obj) {\r\n              Object.defineProperty(obj, key, {\r\n                value: value,\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n              });\r\n            } else {\r\n              obj[key] = value;\r\n            }\r\n            return obj;\r\n          }\r\n\r\n          var InternalDecodedString = /*#__PURE__*/ (function () {\r\n            function InternalDecodedString(value, bytesReadCount) {\r\n              _classCallCheck(this, InternalDecodedString);\r\n\r\n              _defineProperty(this, "_value", void 0);\r\n\r\n              _defineProperty(this, "bytesReadCount", void 0);\r\n\r\n              _defineProperty(this, "length", void 0);\r\n\r\n              this._value = value;\r\n              this.bytesReadCount = bytesReadCount;\r\n              this.length = value.length;\r\n            }\r\n\r\n            _createClass(InternalDecodedString, [\r\n              {\r\n                key: "toString",\r\n                value: function toString() {\r\n                  return this._value;\r\n                },\r\n              },\r\n            ]);\r\n\r\n            return InternalDecodedString;\r\n          })();\r\n\r\n          var StringUtils = {\r\n            readUTF16String: function readUTF16String(\r\n              bytes,\r\n              bigEndian,\r\n              maxBytes\r\n            ) {\r\n              var ix = 0;\r\n              var offset1 = 1,\r\n                offset2 = 0;\r\n              maxBytes = Math.min(maxBytes || bytes.length, bytes.length);\r\n\r\n              if (bytes[0] == 0xfe && bytes[1] == 0xff) {\r\n                bigEndian = true;\r\n                ix = 2;\r\n              } else if (bytes[0] == 0xff && bytes[1] == 0xfe) {\r\n                bigEndian = false;\r\n                ix = 2;\r\n              }\r\n\r\n              if (bigEndian) {\r\n                offset1 = 0;\r\n                offset2 = 1;\r\n              }\r\n\r\n              var arr = [];\r\n\r\n              for (var j = 0; ix < maxBytes; j++) {\r\n                var byte1 = bytes[ix + offset1];\r\n                var byte2 = bytes[ix + offset2];\r\n                var word1 = (byte1 << 8) + byte2;\r\n                ix += 2;\r\n\r\n                if (word1 == 0x0000) {\r\n                  break;\r\n                } else if (byte1 < 0xd8 || byte1 >= 0xe0) {\r\n                  arr[j] = String.fromCharCode(word1);\r\n                } else {\r\n                  var byte3 = bytes[ix + offset1];\r\n                  var byte4 = bytes[ix + offset2];\r\n                  var word2 = (byte3 << 8) + byte4;\r\n                  ix += 2;\r\n                  arr[j] = String.fromCharCode(word1, word2);\r\n                }\r\n              }\r\n\r\n              return new InternalDecodedString(arr.join(""), ix);\r\n            },\r\n            readUTF8String: function readUTF8String(bytes, maxBytes) {\r\n              var ix = 0;\r\n              maxBytes = Math.min(maxBytes || bytes.length, bytes.length);\r\n\r\n              if (bytes[0] == 0xef && bytes[1] == 0xbb && bytes[2] == 0xbf) {\r\n                ix = 3;\r\n              }\r\n\r\n              var arr = [];\r\n\r\n              for (var j = 0; ix < maxBytes; j++) {\r\n                var byte1 = bytes[ix++];\r\n\r\n                if (byte1 == 0x00) {\r\n                  break;\r\n                } else if (byte1 < 0x80) {\r\n                  arr[j] = String.fromCharCode(byte1);\r\n                } else if (byte1 >= 0xc2 && byte1 < 0xe0) {\r\n                  var byte2 = bytes[ix++];\r\n                  arr[j] = String.fromCharCode(\r\n                    ((byte1 & 0x1f) << 6) + (byte2 & 0x3f)\r\n                  );\r\n                } else if (byte1 >= 0xe0 && byte1 < 0xf0) {\r\n                  var byte2 = bytes[ix++];\r\n                  var byte3 = bytes[ix++];\r\n                  arr[j] = String.fromCharCode(\r\n                    ((byte1 & 0xff) << 12) +\r\n                      ((byte2 & 0x3f) << 6) +\r\n                      (byte3 & 0x3f)\r\n                  );\r\n                } else if (byte1 >= 0xf0 && byte1 < 0xf5) {\r\n                  var byte2 = bytes[ix++];\r\n                  var byte3 = bytes[ix++];\r\n                  var byte4 = bytes[ix++];\r\n                  var codepoint =\r\n                    ((byte1 & 0x07) << 18) +\r\n                    ((byte2 & 0x3f) << 12) +\r\n                    ((byte3 & 0x3f) << 6) +\r\n                    (byte4 & 0x3f) -\r\n                    0x10000;\r\n                  arr[j] = String.fromCharCode(\r\n                    (codepoint >> 10) + 0xd800,\r\n                    (codepoint & 0x3ff) + 0xdc00\r\n                  );\r\n                }\r\n              }\r\n\r\n              return new InternalDecodedString(arr.join(""), ix);\r\n            },\r\n            readNullTerminatedString: function readNullTerminatedString(\r\n              bytes,\r\n              maxBytes\r\n            ) {\r\n              var arr = [];\r\n              maxBytes = maxBytes || bytes.length;\r\n\r\n              for (var i = 0; i < maxBytes; ) {\r\n                var byte1 = bytes[i++];\r\n\r\n                if (byte1 == 0x00) {\r\n                  break;\r\n                }\r\n\r\n                arr[i - 1] = String.fromCharCode(byte1);\r\n              }\r\n\r\n              return new InternalDecodedString(arr.join(""), i);\r\n            },\r\n          };\r\n          module.exports = StringUtils;\r\n        },\r\n        {},\r\n      ],\r\n      14: [\r\n        function (require, module, exports) {\r\n          "use strict";\r\n\r\n          function _typeof(obj) {\r\n            "@babel/helpers - typeof";\r\n            if (\r\n              typeof Symbol === "function" &&\r\n              typeof Symbol.iterator === "symbol"\r\n            ) {\r\n              _typeof = function _typeof(obj) {\r\n                return typeof obj;\r\n              };\r\n            } else {\r\n              _typeof = function _typeof(obj) {\r\n                return obj &&\r\n                  typeof Symbol === "function" &&\r\n                  obj.constructor === Symbol &&\r\n                  obj !== Symbol.prototype\r\n                  ? "symbol"\r\n                  : typeof obj;\r\n              };\r\n            }\r\n            return _typeof(obj);\r\n          }\r\n\r\n          function _classCallCheck(instance, Constructor) {\r\n            if (!(instance instanceof Constructor)) {\r\n              throw new TypeError("Cannot call a class as a function");\r\n            }\r\n          }\r\n\r\n          function _defineProperties(target, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n              var descriptor = props[i];\r\n              descriptor.enumerable = descriptor.enumerable || false;\r\n              descriptor.configurable = true;\r\n              if ("value" in descriptor) descriptor.writable = true;\r\n              Object.defineProperty(target, descriptor.key, descriptor);\r\n            }\r\n          }\r\n\r\n          function _createClass(Constructor, protoProps, staticProps) {\r\n            if (protoProps)\r\n              _defineProperties(Constructor.prototype, protoProps);\r\n            if (staticProps) _defineProperties(Constructor, staticProps);\r\n            return Constructor;\r\n          }\r\n\r\n          function _inherits(subClass, superClass) {\r\n            if (typeof superClass !== "function" && superClass !== null) {\r\n              throw new TypeError(\r\n                "Super expression must either be null or a function"\r\n              );\r\n            }\r\n            subClass.prototype = Object.create(\r\n              superClass && superClass.prototype,\r\n              {\r\n                constructor: {\r\n                  value: subClass,\r\n                  writable: true,\r\n                  configurable: true,\r\n                },\r\n              }\r\n            );\r\n            if (superClass) _setPrototypeOf(subClass, superClass);\r\n          }\r\n\r\n          function _setPrototypeOf(o, p) {\r\n            _setPrototypeOf =\r\n              Object.setPrototypeOf ||\r\n              function _setPrototypeOf(o, p) {\r\n                o.__proto__ = p;\r\n                return o;\r\n              };\r\n            return _setPrototypeOf(o, p);\r\n          }\r\n\r\n          function _createSuper(Derived) {\r\n            var hasNativeReflectConstruct = _isNativeReflectConstruct();\r\n            return function _createSuperInternal() {\r\n              var Super = _getPrototypeOf(Derived),\r\n                result;\r\n              if (hasNativeReflectConstruct) {\r\n                var NewTarget = _getPrototypeOf(this).constructor;\r\n                result = Reflect.construct(Super, arguments, NewTarget);\r\n              } else {\r\n                result = Super.apply(this, arguments);\r\n              }\r\n              return _possibleConstructorReturn(this, result);\r\n            };\r\n          }\r\n\r\n          function _possibleConstructorReturn(self, call) {\r\n            if (\r\n              call &&\r\n              (_typeof(call) === "object" || typeof call === "function")\r\n            ) {\r\n              return call;\r\n            }\r\n            return _assertThisInitialized(self);\r\n          }\r\n\r\n          function _assertThisInitialized(self) {\r\n            if (self === void 0) {\r\n              throw new ReferenceError(\r\n                "this hasn\'t been initialised - super() hasn\'t been called"\r\n              );\r\n            }\r\n            return self;\r\n          }\r\n\r\n          function _isNativeReflectConstruct() {\r\n            if (typeof Reflect === "undefined" || !Reflect.construct)\r\n              return false;\r\n            if (Reflect.construct.sham) return false;\r\n            if (typeof Proxy === "function") return true;\r\n            try {\r\n              Boolean.prototype.valueOf.call(\r\n                Reflect.construct(Boolean, [], function () {})\r\n              );\r\n              return true;\r\n            } catch (e) {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          function _getPrototypeOf(o) {\r\n            _getPrototypeOf = Object.setPrototypeOf\r\n              ? Object.getPrototypeOf\r\n              : function _getPrototypeOf(o) {\r\n                  return o.__proto__ || Object.getPrototypeOf(o);\r\n                };\r\n            return _getPrototypeOf(o);\r\n          }\r\n\r\n          function _defineProperty(obj, key, value) {\r\n            if (key in obj) {\r\n              Object.defineProperty(obj, key, {\r\n                value: value,\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n              });\r\n            } else {\r\n              obj[key] = value;\r\n            }\r\n            return obj;\r\n          }\r\n\r\n          var ChunkedFileData = require("./ChunkedFileData");\r\n\r\n          var MediaFileReader = require("./MediaFileReader");\r\n\r\n          var CHUNK_SIZE = 1024;\r\n\r\n          var XhrFileReader = /*#__PURE__*/ (function (_MediaFileReader) {\r\n            _inherits(XhrFileReader, _MediaFileReader);\r\n\r\n            var _super = _createSuper(XhrFileReader);\r\n\r\n            function XhrFileReader(url) {\r\n              var _this;\r\n\r\n              _classCallCheck(this, XhrFileReader);\r\n\r\n              _this = _super.call(this);\r\n\r\n              _defineProperty(_assertThisInitialized(_this), "_url", void 0);\r\n\r\n              _defineProperty(\r\n                _assertThisInitialized(_this),\r\n                "_fileData",\r\n                void 0\r\n              );\r\n\r\n              _this._url = url;\r\n              _this._fileData = new ChunkedFileData();\r\n              return _this;\r\n            }\r\n\r\n            _createClass(\r\n              XhrFileReader,\r\n              [\r\n                {\r\n                  key: "_init",\r\n                  value: function _init(callbacks) {\r\n                    if (XhrFileReader._config.avoidHeadRequests) {\r\n                      this._fetchSizeWithGetRequest(callbacks);\r\n                    } else {\r\n                      this._fetchSizeWithHeadRequest(callbacks);\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  key: "_fetchSizeWithHeadRequest",\r\n                  value: function _fetchSizeWithHeadRequest(callbacks) {\r\n                    var self = this;\r\n\r\n                    this._makeXHRRequest("HEAD", null, {\r\n                      onSuccess: function onSuccess(xhr) {\r\n                        var contentLength = self._parseContentLength(xhr);\r\n\r\n                        if (contentLength) {\r\n                          self._size = contentLength;\r\n                          callbacks.onSuccess();\r\n                        } else {\r\n                          // Content-Length not provided by the server, fallback to\r\n                          // GET requests.\r\n                          self._fetchSizeWithGetRequest(callbacks);\r\n                        }\r\n                      },\r\n                      onError: callbacks.onError,\r\n                    });\r\n                  },\r\n                },\r\n                {\r\n                  key: "_fetchSizeWithGetRequest",\r\n                  value: function _fetchSizeWithGetRequest(callbacks) {\r\n                    var self = this;\r\n\r\n                    var range = this._roundRangeToChunkMultiple([0, 0]);\r\n\r\n                    this._makeXHRRequest("GET", range, {\r\n                      onSuccess: function onSuccess(xhr) {\r\n                        var contentRange = self._parseContentRange(xhr);\r\n\r\n                        var data = self._getXhrResponseContent(xhr);\r\n\r\n                        if (contentRange) {\r\n                          if (contentRange.instanceLength == null) {\r\n                            // Last resort, server is not able to tell us the content length,\r\n                            // need to fetch entire file then.\r\n                            self._fetchEntireFile(callbacks);\r\n\r\n                            return;\r\n                          }\r\n\r\n                          self._size = contentRange.instanceLength;\r\n                        } else {\r\n                          // Range request not supported, we got the entire file\r\n                          self._size = data.length;\r\n                        }\r\n\r\n                        self._fileData.addData(0, data);\r\n\r\n                        callbacks.onSuccess();\r\n                      },\r\n                      onError: callbacks.onError,\r\n                    });\r\n                  },\r\n                },\r\n                {\r\n                  key: "_fetchEntireFile",\r\n                  value: function _fetchEntireFile(callbacks) {\r\n                    var self = this;\r\n\r\n                    this._makeXHRRequest("GET", null, {\r\n                      onSuccess: function onSuccess(xhr) {\r\n                        var data = self._getXhrResponseContent(xhr);\r\n\r\n                        self._size = data.length;\r\n\r\n                        self._fileData.addData(0, data);\r\n\r\n                        callbacks.onSuccess();\r\n                      },\r\n                      onError: callbacks.onError,\r\n                    });\r\n                  },\r\n                },\r\n                {\r\n                  key: "_getXhrResponseContent",\r\n                  value: function _getXhrResponseContent(xhr) {\r\n                    return xhr.responseBody || xhr.responseText || "";\r\n                  },\r\n                },\r\n                {\r\n                  key: "_parseContentLength",\r\n                  value: function _parseContentLength(xhr) {\r\n                    var contentLength = this._getResponseHeader(\r\n                      xhr,\r\n                      "Content-Length"\r\n                    );\r\n\r\n                    if (contentLength == null) {\r\n                      return contentLength;\r\n                    } else {\r\n                      return parseInt(contentLength, 10);\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  key: "_parseContentRange",\r\n                  value: function _parseContentRange(xhr) {\r\n                    var contentRange = this._getResponseHeader(\r\n                      xhr,\r\n                      "Content-Range"\r\n                    );\r\n\r\n                    if (contentRange) {\r\n                      var parsedContentRange = contentRange.match(\r\n                        /bytes (\\d+)-(\\d+)\\/(?:(\\d+)|\\*)/i\r\n                      );\r\n\r\n                      if (!parsedContentRange) {\r\n                        throw new Error(\r\n                          "FIXME: Unknown Content-Range syntax: " + contentRange\r\n                        );\r\n                      }\r\n\r\n                      return {\r\n                        firstBytePosition: parseInt(parsedContentRange[1], 10),\r\n                        lastBytePosition: parseInt(parsedContentRange[2], 10),\r\n                        instanceLength: parsedContentRange[3]\r\n                          ? parseInt(parsedContentRange[3], 10)\r\n                          : null,\r\n                      };\r\n                    } else {\r\n                      return null;\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  key: "loadRange",\r\n                  value: function loadRange(range, callbacks) {\r\n                    var self = this;\r\n\r\n                    if (\r\n                      self._fileData.hasDataRange(\r\n                        range[0],\r\n                        Math.min(self._size, range[1])\r\n                      )\r\n                    ) {\r\n                      setTimeout(callbacks.onSuccess, 1);\r\n                      return;\r\n                    } // Always download in multiples of CHUNK_SIZE. If we\'re going to make a\r\n                    // request might as well get a chunk that makes sense. The big cost is\r\n                    // establishing the connection so getting 10bytes or 1K doesn\'t really\r\n                    // make a difference.\r\n\r\n                    range = this._roundRangeToChunkMultiple(range); // Upper range should not be greater than max file size\r\n\r\n                    range[1] = Math.min(self._size, range[1]);\r\n\r\n                    this._makeXHRRequest("GET", range, {\r\n                      onSuccess: function onSuccess(xhr) {\r\n                        var data = self._getXhrResponseContent(xhr);\r\n\r\n                        self._fileData.addData(range[0], data);\r\n\r\n                        callbacks.onSuccess();\r\n                      },\r\n                      onError: callbacks.onError,\r\n                    });\r\n                  },\r\n                },\r\n                {\r\n                  key: "_roundRangeToChunkMultiple",\r\n                  value: function _roundRangeToChunkMultiple(range) {\r\n                    var length = range[1] - range[0] + 1;\r\n                    var newLength = Math.ceil(length / CHUNK_SIZE) * CHUNK_SIZE;\r\n                    return [range[0], range[0] + newLength - 1];\r\n                  },\r\n                },\r\n                {\r\n                  key: "_makeXHRRequest",\r\n                  value: function _makeXHRRequest(method, range, callbacks) {\r\n                    var xhr = this._createXHRObject();\r\n\r\n                    xhr.open(method, this._url);\r\n\r\n                    var onXHRLoad = function onXHRLoad() {\r\n                      // 200 - OK\r\n                      // 206 - Partial Content\r\n                      // $FlowIssue - xhr will not be null here\r\n                      if (xhr.status === 200 || xhr.status === 206) {\r\n                        callbacks.onSuccess(xhr);\r\n                      } else if (callbacks.onError) {\r\n                        callbacks.onError({\r\n                          type: "xhr",\r\n                          info: "Unexpected HTTP status " + xhr.status + ".",\r\n                          xhr: xhr,\r\n                        });\r\n                      }\r\n\r\n                      xhr = null;\r\n                    };\r\n\r\n                    if (typeof xhr.onload !== "undefined") {\r\n                      xhr.onload = onXHRLoad;\r\n\r\n                      xhr.onerror = function () {\r\n                        if (callbacks.onError) {\r\n                          callbacks.onError({\r\n                            type: "xhr",\r\n                            info: "Generic XHR error, check xhr object.",\r\n                            xhr: xhr,\r\n                          });\r\n                        }\r\n                      };\r\n                    } else {\r\n                      xhr.onreadystatechange = function () {\r\n                        // $FlowIssue - xhr will not be null here\r\n                        if (xhr.readyState === 4) {\r\n                          onXHRLoad();\r\n                        }\r\n                      };\r\n                    }\r\n\r\n                    if (XhrFileReader._config.timeoutInSec) {\r\n                      xhr.timeout = XhrFileReader._config.timeoutInSec * 1000;\r\n\r\n                      xhr.ontimeout = function () {\r\n                        if (callbacks.onError) {\r\n                          callbacks.onError({\r\n                            type: "xhr",\r\n                            // $FlowIssue - xhr.timeout will not be null\r\n                            info:\r\n                              "Timeout after " +\r\n                              xhr.timeout / 1000 +\r\n                              "s. Use jsmediatags.Config.setXhrTimeout to override.",\r\n                            xhr: xhr,\r\n                          });\r\n                        }\r\n                      };\r\n                    }\r\n\r\n                    xhr.overrideMimeType("text/plain; charset=x-user-defined");\r\n\r\n                    if (range) {\r\n                      this._setRequestHeader(\r\n                        xhr,\r\n                        "Range",\r\n                        "bytes=" + range[0] + "-" + range[1]\r\n                      );\r\n                    }\r\n\r\n                    this._setRequestHeader(\r\n                      xhr,\r\n                      "If-Modified-Since",\r\n                      "Sat, 01 Jan 1970 00:00:00 GMT"\r\n                    );\r\n\r\n                    xhr.send(null);\r\n                  },\r\n                },\r\n                {\r\n                  key: "_setRequestHeader",\r\n                  value: function _setRequestHeader(\r\n                    xhr,\r\n                    headerName,\r\n                    headerValue\r\n                  ) {\r\n                    if (\r\n                      XhrFileReader._config.disallowedXhrHeaders.indexOf(\r\n                        headerName.toLowerCase()\r\n                      ) < 0\r\n                    ) {\r\n                      xhr.setRequestHeader(headerName, headerValue);\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  key: "_hasResponseHeader",\r\n                  value: function _hasResponseHeader(xhr, headerName) {\r\n                    var allResponseHeaders = xhr.getAllResponseHeaders();\r\n\r\n                    if (!allResponseHeaders) {\r\n                      return false;\r\n                    }\r\n\r\n                    var headers = allResponseHeaders.split("\\r\\n");\r\n                    var headerNames = [];\r\n\r\n                    for (var i = 0; i < headers.length; i++) {\r\n                      headerNames[i] = headers[i].split(":")[0].toLowerCase();\r\n                    }\r\n\r\n                    return headerNames.indexOf(headerName.toLowerCase()) >= 0;\r\n                  },\r\n                },\r\n                {\r\n                  key: "_getResponseHeader",\r\n                  value: function _getResponseHeader(xhr, headerName) {\r\n                    if (!this._hasResponseHeader(xhr, headerName)) {\r\n                      return null;\r\n                    }\r\n\r\n                    return xhr.getResponseHeader(headerName);\r\n                  },\r\n                },\r\n                {\r\n                  key: "getByteAt",\r\n                  value: function getByteAt(offset) {\r\n                    var character = this._fileData.getByteAt(offset);\r\n\r\n                    return character.charCodeAt(0) & 0xff;\r\n                  },\r\n                },\r\n                {\r\n                  key: "_isWebWorker",\r\n                  value: function _isWebWorker() {\r\n                    return (\r\n                      typeof WorkerGlobalScope !== "undefined" &&\r\n                      self instanceof WorkerGlobalScope\r\n                    );\r\n                  },\r\n                },\r\n                {\r\n                  key: "_createXHRObject",\r\n                  value: function _createXHRObject() {\r\n                    if (typeof window === "undefined" && !this._isWebWorker()) {\r\n                      // $FlowIssue - flow is not able to recognize this module.\r\n                      return new (require("xhr2").XMLHttpRequest)();\r\n                    }\r\n\r\n                    if (typeof XMLHttpRequest !== "undefined") {\r\n                      return new XMLHttpRequest();\r\n                    }\r\n\r\n                    throw new Error("XMLHttpRequest is not supported");\r\n                  },\r\n                },\r\n              ],\r\n              [\r\n                {\r\n                  key: "canReadFile",\r\n                  value: function canReadFile(file) {\r\n                    return (\r\n                      typeof file === "string" && /^[a-z]+:\\/\\//i.test(file)\r\n                    );\r\n                  },\r\n                },\r\n                {\r\n                  key: "setConfig",\r\n                  value: function setConfig(config) {\r\n                    for (var key in config) {\r\n                      if (config.hasOwnProperty(key)) {\r\n                        this._config[key] = config[key];\r\n                      }\r\n                    }\r\n\r\n                    var disallowedXhrHeaders =\r\n                      this._config.disallowedXhrHeaders;\r\n\r\n                    for (var i = 0; i < disallowedXhrHeaders.length; i++) {\r\n                      disallowedXhrHeaders[i] =\r\n                        disallowedXhrHeaders[i].toLowerCase();\r\n                    }\r\n                  },\r\n                },\r\n              ]\r\n            );\r\n\r\n            return XhrFileReader;\r\n          })(MediaFileReader);\r\n\r\n          _defineProperty(XhrFileReader, "_config", void 0);\r\n\r\n          XhrFileReader._config = {\r\n            avoidHeadRequests: false,\r\n            disallowedXhrHeaders: [],\r\n            timeoutInSec: 30,\r\n          };\r\n          module.exports = XhrFileReader;\r\n        },\r\n        { "./ChunkedFileData": 5, "./MediaFileReader": 11, xhr2: 2 },\r\n      ],\r\n      15: [\r\n        function (require, module, exports) {\r\n          "use strict";\r\n\r\n          function _classCallCheck(instance, Constructor) {\r\n            if (!(instance instanceof Constructor)) {\r\n              throw new TypeError("Cannot call a class as a function");\r\n            }\r\n          }\r\n\r\n          function _defineProperties(target, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n              var descriptor = props[i];\r\n              descriptor.enumerable = descriptor.enumerable || false;\r\n              descriptor.configurable = true;\r\n              if ("value" in descriptor) descriptor.writable = true;\r\n              Object.defineProperty(target, descriptor.key, descriptor);\r\n            }\r\n          }\r\n\r\n          function _createClass(Constructor, protoProps, staticProps) {\r\n            if (protoProps)\r\n              _defineProperties(Constructor.prototype, protoProps);\r\n            if (staticProps) _defineProperties(Constructor, staticProps);\r\n            return Constructor;\r\n          }\r\n\r\n          function _defineProperty(obj, key, value) {\r\n            if (key in obj) {\r\n              Object.defineProperty(obj, key, {\r\n                value: value,\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true,\r\n              });\r\n            } else {\r\n              obj[key] = value;\r\n            }\r\n            return obj;\r\n          }\r\n\r\n          var MediaFileReader = require("./MediaFileReader");\r\n\r\n          var XhrFileReader = require("./XhrFileReader");\r\n\r\n          var BlobFileReader = require("./BlobFileReader");\r\n\r\n          var ArrayFileReader = require("./ArrayFileReader");\r\n\r\n          var MediaTagReader = require("./MediaTagReader");\r\n\r\n          var ID3v1TagReader = require("./ID3v1TagReader");\r\n\r\n          var ID3v2TagReader = require("./ID3v2TagReader");\r\n\r\n          var MP4TagReader = require("./MP4TagReader");\r\n\r\n          var FLACTagReader = require("./FLACTagReader");\r\n\r\n          var mediaFileReaders = [];\r\n          var mediaTagReaders = [];\r\n\r\n          function read(location, callbacks) {\r\n            new Reader(location).read(callbacks);\r\n          }\r\n\r\n          function isRangeValid(range, fileSize) {\r\n            var invalidPositiveRange =\r\n              range.offset >= 0 && range.offset + range.length >= fileSize;\r\n            var invalidNegativeRange =\r\n              range.offset < 0 &&\r\n              (-range.offset > fileSize || range.offset + range.length > 0);\r\n            return !(invalidPositiveRange || invalidNegativeRange);\r\n          }\r\n\r\n          var Reader = /*#__PURE__*/ (function () {\r\n            function Reader(file) {\r\n              _classCallCheck(this, Reader);\r\n\r\n              _defineProperty(this, "_file", void 0);\r\n\r\n              _defineProperty(this, "_tagsToRead", void 0);\r\n\r\n              _defineProperty(this, "_fileReader", void 0);\r\n\r\n              _defineProperty(this, "_tagReader", void 0);\r\n\r\n              this._file = file;\r\n            }\r\n\r\n            _createClass(Reader, [\r\n              {\r\n                key: "setTagsToRead",\r\n                value: function setTagsToRead(tagsToRead) {\r\n                  this._tagsToRead = tagsToRead;\r\n                  return this;\r\n                },\r\n              },\r\n              {\r\n                key: "setFileReader",\r\n                value: function setFileReader(fileReader) {\r\n                  this._fileReader = fileReader;\r\n                  return this;\r\n                },\r\n              },\r\n              {\r\n                key: "setTagReader",\r\n                value: function setTagReader(tagReader) {\r\n                  this._tagReader = tagReader;\r\n                  return this;\r\n                },\r\n              },\r\n              {\r\n                key: "read",\r\n                value: function read(callbacks) {\r\n                  var FileReader = this._getFileReader();\r\n\r\n                  var fileReader = new FileReader(this._file);\r\n                  var self = this;\r\n                  fileReader.init({\r\n                    onSuccess: function onSuccess() {\r\n                      self._getTagReader(fileReader, {\r\n                        onSuccess: function onSuccess(TagReader) {\r\n                          new TagReader(fileReader)\r\n                            .setTagsToRead(self._tagsToRead)\r\n                            .read(callbacks);\r\n                        },\r\n                        onError: callbacks.onError,\r\n                      });\r\n                    },\r\n                    onError: callbacks.onError,\r\n                  });\r\n                },\r\n              },\r\n              {\r\n                key: "_getFileReader",\r\n                value: function _getFileReader() {\r\n                  if (this._fileReader) {\r\n                    return this._fileReader;\r\n                  } else {\r\n                    return this._findFileReader();\r\n                  }\r\n                },\r\n              },\r\n              {\r\n                key: "_findFileReader",\r\n                value: function _findFileReader() {\r\n                  for (var i = 0; i < mediaFileReaders.length; i++) {\r\n                    if (mediaFileReaders[i].canReadFile(this._file)) {\r\n                      return mediaFileReaders[i];\r\n                    }\r\n                  }\r\n\r\n                  throw new Error(\r\n                    "No suitable file reader found for " + this._file\r\n                  );\r\n                },\r\n              },\r\n              {\r\n                key: "_getTagReader",\r\n                value: function _getTagReader(fileReader, callbacks) {\r\n                  if (this._tagReader) {\r\n                    var tagReader = this._tagReader;\r\n                    setTimeout(function () {\r\n                      callbacks.onSuccess(tagReader);\r\n                    }, 1);\r\n                  } else {\r\n                    this._findTagReader(fileReader, callbacks);\r\n                  }\r\n                },\r\n              },\r\n              {\r\n                key: "_findTagReader",\r\n                value: function _findTagReader(fileReader, callbacks) {\r\n                  // We don\'t want to make multiple fetches per tag reader to get the tag\r\n                  // identifier. The strategy here is to combine all the tag identifier\r\n                  // ranges into one and make a single fetch. This is particularly important\r\n                  // in file readers that have expensive loads like the XHR one.\r\n                  // However, with this strategy we run into the problem of loading the\r\n                  // entire file because tag identifiers might be at the start or end of\r\n                  // the file.\r\n                  // To get around this we divide the tag readers into two categories, the\r\n                  // ones that read their tag identifiers from the start of the file and the\r\n                  // ones that read from the end of the file.\r\n                  var tagReadersAtFileStart = [];\r\n                  var tagReadersAtFileEnd = [];\r\n                  var fileSize = fileReader.getSize();\r\n\r\n                  for (var i = 0; i < mediaTagReaders.length; i++) {\r\n                    var range = mediaTagReaders[i].getTagIdentifierByteRange();\r\n\r\n                    if (!isRangeValid(range, fileSize)) {\r\n                      continue;\r\n                    }\r\n\r\n                    if (\r\n                      (range.offset >= 0 && range.offset < fileSize / 2) ||\r\n                      (range.offset < 0 && range.offset < -fileSize / 2)\r\n                    ) {\r\n                      tagReadersAtFileStart.push(mediaTagReaders[i]);\r\n                    } else {\r\n                      tagReadersAtFileEnd.push(mediaTagReaders[i]);\r\n                    }\r\n                  }\r\n\r\n                  var tagsLoaded = false;\r\n                  var loadTagIdentifiersCallbacks = {\r\n                    onSuccess: function onSuccess() {\r\n                      if (!tagsLoaded) {\r\n                        // We\'re expecting to load two sets of tag identifiers. This flag\r\n                        // indicates when the first one has been loaded.\r\n                        tagsLoaded = true;\r\n                        return;\r\n                      }\r\n\r\n                      for (var i = 0; i < mediaTagReaders.length; i++) {\r\n                        var range =\r\n                          mediaTagReaders[i].getTagIdentifierByteRange();\r\n\r\n                        if (!isRangeValid(range, fileSize)) {\r\n                          continue;\r\n                        }\r\n\r\n                        try {\r\n                          var tagIndentifier = fileReader.getBytesAt(\r\n                            range.offset >= 0\r\n                              ? range.offset\r\n                              : range.offset + fileSize,\r\n                            range.length\r\n                          );\r\n                        } catch (ex) {\r\n                          if (callbacks.onError) {\r\n                            callbacks.onError({\r\n                              type: "fileReader",\r\n                              info: ex.message,\r\n                            });\r\n                          }\r\n\r\n                          return;\r\n                        }\r\n\r\n                        if (\r\n                          mediaTagReaders[i].canReadTagFormat(tagIndentifier)\r\n                        ) {\r\n                          callbacks.onSuccess(mediaTagReaders[i]);\r\n                          return;\r\n                        }\r\n                      }\r\n\r\n                      if (callbacks.onError) {\r\n                        callbacks.onError({\r\n                          type: "tagFormat",\r\n                          info: "No suitable tag reader found",\r\n                        });\r\n                      }\r\n                    },\r\n                    onError: callbacks.onError,\r\n                  };\r\n\r\n                  this._loadTagIdentifierRanges(\r\n                    fileReader,\r\n                    tagReadersAtFileStart,\r\n                    loadTagIdentifiersCallbacks\r\n                  );\r\n\r\n                  this._loadTagIdentifierRanges(\r\n                    fileReader,\r\n                    tagReadersAtFileEnd,\r\n                    loadTagIdentifiersCallbacks\r\n                  );\r\n                },\r\n              },\r\n              {\r\n                key: "_loadTagIdentifierRanges",\r\n                value: function _loadTagIdentifierRanges(\r\n                  fileReader,\r\n                  tagReaders,\r\n                  callbacks\r\n                ) {\r\n                  if (tagReaders.length === 0) {\r\n                    // Force async\r\n                    setTimeout(callbacks.onSuccess, 1);\r\n                    return;\r\n                  }\r\n\r\n                  var tagIdentifierRange = [Number.MAX_VALUE, 0];\r\n                  var fileSize = fileReader.getSize(); // Create a super set of all ranges so we can load them all at once.\r\n                  // Might need to rethink this approach if there are tag ranges too far\r\n                  // a part from each other. We\'re good for now though.\r\n\r\n                  for (var i = 0; i < tagReaders.length; i++) {\r\n                    var range = tagReaders[i].getTagIdentifierByteRange();\r\n                    var start =\r\n                      range.offset >= 0\r\n                        ? range.offset\r\n                        : range.offset + fileSize;\r\n                    var end = start + range.length - 1;\r\n                    tagIdentifierRange[0] = Math.min(\r\n                      start,\r\n                      tagIdentifierRange[0]\r\n                    );\r\n                    tagIdentifierRange[1] = Math.max(\r\n                      end,\r\n                      tagIdentifierRange[1]\r\n                    );\r\n                  }\r\n\r\n                  fileReader.loadRange(tagIdentifierRange, callbacks);\r\n                },\r\n              },\r\n            ]);\r\n\r\n            return Reader;\r\n          })();\r\n\r\n          var Config = /*#__PURE__*/ (function () {\r\n            function Config() {\r\n              _classCallCheck(this, Config);\r\n            }\r\n\r\n            _createClass(Config, null, [\r\n              {\r\n                key: "addFileReader",\r\n                value: function addFileReader(fileReader) {\r\n                  mediaFileReaders.push(fileReader);\r\n                  return Config;\r\n                },\r\n              },\r\n              {\r\n                key: "addTagReader",\r\n                value: function addTagReader(tagReader) {\r\n                  mediaTagReaders.push(tagReader);\r\n                  return Config;\r\n                },\r\n              },\r\n              {\r\n                key: "removeTagReader",\r\n                value: function removeTagReader(tagReader) {\r\n                  var tagReaderIx = mediaTagReaders.indexOf(tagReader);\r\n\r\n                  if (tagReaderIx >= 0) {\r\n                    mediaTagReaders.splice(tagReaderIx, 1);\r\n                  }\r\n\r\n                  return Config;\r\n                },\r\n              },\r\n              {\r\n                key: "EXPERIMENTAL_avoidHeadRequests",\r\n                value: function EXPERIMENTAL_avoidHeadRequests() {\r\n                  XhrFileReader.setConfig({\r\n                    avoidHeadRequests: true,\r\n                  });\r\n                },\r\n              },\r\n              {\r\n                key: "setDisallowedXhrHeaders",\r\n                value: function setDisallowedXhrHeaders(disallowedXhrHeaders) {\r\n                  XhrFileReader.setConfig({\r\n                    disallowedXhrHeaders: disallowedXhrHeaders,\r\n                  });\r\n                },\r\n              },\r\n              {\r\n                key: "setXhrTimeoutInSec",\r\n                value: function setXhrTimeoutInSec(timeoutInSec) {\r\n                  XhrFileReader.setConfig({\r\n                    timeoutInSec: timeoutInSec,\r\n                  });\r\n                },\r\n              },\r\n            ]);\r\n\r\n            return Config;\r\n          })();\r\n\r\n          Config.addFileReader(XhrFileReader)\r\n            .addFileReader(BlobFileReader)\r\n            .addFileReader(ArrayFileReader)\r\n            .addTagReader(ID3v2TagReader)\r\n            .addTagReader(ID3v1TagReader)\r\n            .addTagReader(MP4TagReader)\r\n            .addTagReader(FLACTagReader);\r\n\r\n          if (typeof process !== "undefined" && !process.browser) {\r\n            if (\r\n              typeof navigator !== "undefined" &&\r\n              navigator.product === "ReactNative"\r\n            ) {\r\n              var ReactNativeFileReader = require("./ReactNativeFileReader");\r\n\r\n              Config.addFileReader(ReactNativeFileReader);\r\n            } else {\r\n              var NodeFileReader = require("./NodeFileReader");\r\n\r\n              Config.addFileReader(NodeFileReader);\r\n            }\r\n          }\r\n\r\n          module.exports = {\r\n            read: read,\r\n            Reader: Reader,\r\n            Config: Config,\r\n          };\r\n        },\r\n        {\r\n          "./ArrayFileReader": 3,\r\n          "./BlobFileReader": 4,\r\n          "./FLACTagReader": 6,\r\n          "./ID3v1TagReader": 7,\r\n          "./ID3v2TagReader": 9,\r\n          "./MP4TagReader": 10,\r\n          "./MediaFileReader": 11,\r\n          "./MediaTagReader": 12,\r\n          "./NodeFileReader": 1,\r\n          "./ReactNativeFileReader": 1,\r\n          "./XhrFileReader": 14,\r\n        },\r\n      ],\r\n    },\r\n    {},\r\n    [15]\r\n  )(15);\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///907\n')}},I=>{I(I.s=819)}]);